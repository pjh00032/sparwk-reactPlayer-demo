{"version":3,"sources":["config/sortable.js","config/player.js","components/AudioComponent.js","components/PlayListSetComponent.js","components/PlayListComponent.js","config/playListModes.js","components/AudioListsPanel.js","components/CircleProcessBar.js","components/Icon.js","components/PlayModel.js","config/locale.js","config/mediaQuery.js","config/mode.js","config/audioState.js","config/playMode.js","config/theme.js","config/slider.js","config/propTypes.js","config/volumeFade.js","locale/en_US.js","locale/zh_CN.js","locale/index.js","lyric.js","utils.js","components/Waveform.js","components/DefaultLyrics.js","ReactJKMusicPlayer.js","config/animate.js","config/keycode.js","styles/index.less","example.less","App.js","reportWebVitals.js","index.js"],"names":["selector","swapClass","swap","animation","easing","PLAYER_KEY","AudioComponent","audioLists","locale","icon","playing","playId","onPlay","removeId","remove","onDelete","loading","playListName","onClosePanel","onBackClick","onLikeModeChange","className","onClick","backIcon","length","title","closeText","close","cls","SORTABLE_CONFIG","id","map","audio","name","singer","likeMode","audioId","isCurrentPlaying","clickToPauseText","clickToPlayText","pause","play","undefined","like","dislike","clickToDeleteText","emptyText","memo","PlayListSetComponent","PL_ID","onPlayListRename","onPlayListDuplicate","onPlayListDelete","React","useState","anchorEl","setAnchorEl","open","Boolean","event","currentTarget","aria-controls","aria-haspopup","variant","folderSet","Menu","elevation","keepMounted","transformOrigin","vertical","horizontal","onClose","MenuItem","playListRename","playListDuplicate","playListDelete","PlayListComponent","playLists","onPlayListClick","onChangeAddPlayListName","onAddPlayList","onAddPlayListConfirm","isAddPlayList","addPlayListName","playListRenameInput","playListsText","folderPlus","playlist","musicCnt","isRename","playListSongs","draggable","type","onChange","value","emptyListText","AudioListsPanel","panelToggleAnimate","glassBg","isMobile","listMode","PLAY_LIST_MODE","CircleProcessBar","progress","r","currentProgress","toFixed","perimeter","Math","PI","strokeDasharray","floor","cx","cy","fill","AnimatePlayIcon","FaPlayCircle","AnimatePauseIcon","FaPauseCircle","PlayModel","visible","en_US","zh_CN","MEDIA_QUERY","MODE","FULL","MINI","AUDIO_NETWORK_STATE","AUDIO_READY_STATE","order","orderLoop","singleLoop","shufflePlay","THEME","LIGHT","DARK","AUTO","PROGRESS_BAR_SLIDER_OPTIONS","PropTypes","oneOf","array","isRequired","oneOfType","object","Object","values","Locale","bool","string","shape","top","number","left","right","bottom","func","node","element","fadeIn","fadeOut","min","step","VOLUME_BAR_SLIDER_OPTIONS","max","VOLUME_FADE","playModeText","likeModeText","openText","nextTrackText","previousTrackText","reloadText","volumeText","toggleLyricText","toggleMiniModeText","destroyText","downloadText","lightThemeText","darkThemeText","switchThemeText","removeAudioListsText","controllerTitle","FaHeadphones","emptyLyricText","loadingText","folderPlusText","confirm","LOCALE","timeExp","tagRegMap","artist","album","offset","by","Lyric","lrc","handler","this","tags","lines","state","curLine","_init","_initTag","_initLines","tag","matches","match","RegExp","split","parseInt","i","line","result","exec","txt","replace","trim","push","time","sort","a","b","lineNum","delay","curNum","Date","startStamp","timer","setTimeout","_callHandler","_playRest","startTime","skipLast","_findCurNum","clearTimeout","now","stop","pauseStamp","formatTime","second","h","s","zero","v","join","createRandomNum","minNum","maxNum","random","s4","toString","substring","uuId","isSafari","test","navigator","userAgent","isIOS","includes","platform","document","swing","p","cos","adjustVolume","startVolume","endVolume","duration","interval","callback","delta","volume","fadeInterval","updateIntervalEndVolume","ticks","tick","newVolume","setInterval","newDelta","clearInterval","formWaveSurferOptions","ref","container","waveColor","progressColor","cursorColor","barWidth","barRadius","responsive","height","normalize","partialRender","hideScrollbar","displayMilliseconds","debug","controls","Waveform","wave","url","onSeek","waveformRef","useRef","useEffect","current","WaveSurfer","create","load","setMute","on","destroy","DefaultLyrics","lyrics","currentMillisecond","autoScroll","style","width","lineRenderer","index","active","fontSize","color","fontWeight","lineHeight","content","Sortable","mount","Swap","IS_MOBILE","getIsMobile","DEFAULT_ICON","delete","size","download","toggle","lyric","mute","next","prev","reload","loop","shuffle","packUpPanelMobile","empty","confirmIcon","ReactJkMusicPlayer","props","isDrag","initPlayId","getPlayIndex","playIndex","onCoverClick","mode","showMiniModeCover","cover","getBaseAudioInfo","getAudioTitle","audioTitle","getOnlyAudioTitle","renderAudioTitle","toggleAudioLyric","setState","audioLyricVisible","togglePlayMode","_PLAY_MODE_","findIndex","playMode","_PLAY_MODE_LENGTH_","playModelNameVisible","playModeTipVisible","onPlayModeChange","playModelTimer","playModeShowTime","renderPlayModeIcon","animateProps","IconNode","PLAY_MODE","cloneElement","iconMap","renderLikeModeIcon","audioListsPlay","ignore","currentPlayId","canPlay","Array","isArray","console","warn","musicSrc","loadAudio","originMusicSrc","currentTime","loadedProgress","isAutoPlayWhenUserClicked","updateMediaSessionMetadata","initLyricParser","onAudioPlayTrackChange","onPlayIndexChange","then","onAudioError","resetAudioStatus","initPlayInfo","resetAudioPlayStatus","resetAudioPlayId","clearAudioLists","onAudioListsChange","onDeleteAudioLists","e","stopPropagation","newAudioLists","filter","handlePlay","openAudioListsPanel","initAnimate","audioListsPanelVisible","onAudioListsPanelChange","closeAudioListsPanel","_closeAudioListsPanel","themeChange","isLight","theme","onThemeChange","onAudioDownload","customDownloader","baseAudioInfo","onBeforeAudioDownload","transformedDownloadAudioInfo","info","src","filename","mimeType","onControllerDrag","x","y","moveX","moveY","onControllerDragStart","onControllerDragStop","showDestroy","destroyBtn","contains","target","onDestroyPlayer","isNeedMobileHack","loadAndPlayAudio","onOpenPanel","onResetVolume","currentAudioVolume","setAudioVolume","getVolumeBarValue","volumeBarValue","getListeningVolume","soundValue","currentVolumeFade","stopAll","preventDefault","getBoundingClientRect","ele","listeningVolume","sqrt","onAudioReload","onWavePositionChange","wavesurfer","isPlaying","playPause","newList","newPlayListName","newPlayListOrder","myPlayLists","newPlayListID","onChangeRenamePlayListName","renamePlayListName","onRenamePlayListConfirm","onRenamePlayListCancel","newArray","forEach","log","onAudioListSort","audioList","onFind","arr","searchResult","playListMode","toggleMode","spaceBar","onModeChange","player","focus","preventScroll","onHidePanel","onBeforeDestroy","Promise","resolve","_onDestroyPlayer","catch","unInstallPlayer","_onDestroyed","isPlayDestroyed","onDestroyed","getCurrentPlayIndex","res","currentLyric","defaultLyric","onTogglePlay","isAudioSeeking","volumeFade","currentVolumeFadeInterval","isCurrentlyFading","fadeOutInterval","fadeInInterval","playAudio","isLoaded","isAudioCanPlay","setAudioLoaded","onAudioPause","togglePlay","onAudioPlay","onSetAudioLoadedProgress","timeRanges","buffered","end","remember","isInitRemember","networkState","readyState","reason","isResetCoverRotate","getLastPlayStatus","isLastPause","isInitAutoPlay","error","loadAudioErrorPlayNext","currentPlayMode","isNext","audioListsLen","currentPlayIndex","randomIndex","randomPlayId","onAudioEnd","onAudioEnded","audioPrevAndNextBasePlayHandle","_playMode","onPlayPrevAudio","restartCurrentOnPrev","onWaveSeek","onPlayNextAudio","audioTimeUpdate","saveLastPlayStatus","onAudioProgress","onAudioSoundChange","onAudioVolumeChange","formattedVolume","parseFloat","onProgressChange","onAudioSeeked","seek","onAudioMute","onAudioAbort","audioInfo","mergedAudioInfo","toggleTheme","onAudioListsSortEnd","oldIndex","newIndex","_audioLists","item","splice","_playId","onAudioListsDragEnd","lastPlayStatus","JSON","stringify","localStorage","setItem","defaultPlayMode","defaultPlayIndex","status","getDefaultPlayId","parse","getItem","checkCurrentPlayingAudioIsInUpdatedAudioLists","nextProps","quietUpdate","some","newAudioInfo","playPromise","mockAutoPlayForMobile","autoPlay","bindMobileAutoPlayEvents","addEventListener","once","bindSafariAutoPlayEvents","unBindEvents","bindEvents","eventsNames","waiting","canplay","onAudioCanPlay","ended","timeupdate","volumechange","abort","bind","_events","removeEventListener","getPlayId","_getPlayInfo","find","getPlayInfo","lastAudioLists","mergedAudioLists","getPlayInfoOfNewList","prevAudioBeforeUpdate","cb","addMatchMediaListener","query","media","window","matchMedia","addListener","removeMatchMediaListener","removeListener","addMobileListener","mobileMedia","mobileMediaQuery","mobileMediaHandler","removeMobileListener","addSystemThemeListener","systemThemeMedia","systemThemeMediaHandler","removeSystemThemeListener","updateTheme","setDefaultAudioVolume","defaultVolume","onLyricChange","onAudioLyricChange","onChangeEditLyrics","newLyric","getCurrentTime","updateMode","updatePlayMode","updateAudioLists","loadNewAudioLists","autoPlayInitLoadPlayList","resetPlayId","changeAudioLists","updatePlayIndex","currentPlayAudio","playByIndex","getEnhanceAudio","sortable","defineProperty","writable","onGetAudioInstance","getAudioInstance","showMediaSession","artwork","sizes","updateMediaSessionPositionState","mediaSession","setPositionState","audioDuration","playbackRate","position","onAddMediaSession","setActionHandler","details","skipTime","seekOffset","fastSeek","seekTime","bindUnhandledRejection","unBindUnhandledRejection","bindKeyDownEvents","onKeyDown","unBindKeyDownEvents","keyCode","initPlayer","isBindKeyDownEvents","resetAudioVolume","removeLyric","initSortableAudioLists","sortableOptions","defaultOptions","querySelector","onEnd","targetId","createRef","DEFAULT_VOLUME","LOCALE_CONFIG","Number","Spin","drag","showDownload","showPlay","showReload","showPlayMode","showLikeMode","showThemeSwitch","extendsContent","seeked","showProgressLoadBar","bounds","defaultPosition","showMiniProcessBar","preload","lyricClassName","showLyric","getContainer","autoHiddenCover","preloadState","show","hide","currentPlayModeName","miniModeCoverConfig","backgroundImage","formattedCurrentTime","formattedAudioDuration","progressHandler","onAfterChange","ProgressBar","ceil","defaultValue","DownloadComponent","ThemeSwitchComponent","checkedChildren","unCheckedChildren","checked","ReloadComponent","LyricComponent","PlayModeComponent","LikeModeComponent","miniProcessBarR","DestroyComponent","AudioController","tabIndex","body","shouldShowPlayIcon","createPortal","display","TextField","multiline","rows","onDrag","onStop","onStart","muted","played","paused","startDate","currentAudioListInfo","seconds","getDuration","seekTo","_","prevState","arr1","clearPriorAudioLists","isEqualAudioLists","arr2","playInfo","val","PureComponent","defaultProps","audioList1","AD_ID","options","currentVolume","errMsg","panelVisible","reject","Demo","unmount","params","updateParams","data","alert","hot","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.38ac3b8f.chunk.js","sourcesContent":["export default {\r\n  selector: 'audio-lists-panel-content-wrap',\r\n  swapClass: 'audio-lists-panel-sortable-highlight-bg',\r\n  swap: true,\r\n  animation: 100,\r\n  easing: 'cubic-bezier(0.43, -0.1, 0.16, 1.1)',\r\n}\r\n","export const DEFAULT_PLAY_INDEX = 0\r\nexport const DEFAULT_VOLUME = 1\r\nexport const DEFAULT_REMOVE_ID = -1\r\nexport const PLAYER_KEY = '__PLAYER_KEY__'\r\n","import cls from 'classnames';\r\nimport React, { memo } from 'react';\r\nimport SORTABLE_CONFIG from \"../config/sortable\";\r\nimport { PLAYER_KEY } from '../config/player';\r\n\r\n\r\n/*\r\n* AudioComponent\r\n* : music list in my play list\r\n*\r\n* --미완성 부분--\r\n* 1. like mode / remove\r\n* */\r\nconst AudioComponent = ({\r\naudioLists,         //플레이 리스트 안에 있는 음악 리스트\r\nlocale,             //다국어\r\nicon,               //icon 목록\r\nplaying,            //재생 여부\r\nplayId,             //재생중인 음악 id\r\nonPlay,             //AudioListPanel 에서 음악 목록에 있는 음악 클릭시, 음악 재생 이벤트\r\nremoveId,           //삭제하는 음악 id\r\nremove,             //음악 삭제 여부\r\nonDelete,           //음악 삭제 버튼 이벤트(onClick)\r\nloading,            //로딩 여부\r\nplayListName,       //플레이 리스트명\r\nonClosePanel,           //AudioListPanel 축소 이벤트\r\nonBackClick,        //뒤로가기 이벤트(onClick)(플레이 리스트 목록으로 이동)\r\nonLikeModeChange    //like 모드 이벤트(onClick)\r\n }) => (\r\n\r\n    <div>\r\n        {/*////////////////Header///////////////////////*/}\r\n        <div className=\"audio-lists-panel-header\">\r\n            <h2 className=\"audio-lists-panel-header-title\">\r\n                {/*뒤로가기*/}\r\n                <span onClick={onBackClick}>\r\n                    {icon.backIcon}\r\n                </span>\r\n                {/*플레이 리스트 명*/}\r\n                <span>\r\n                    {playListName} /\r\n                </span>\r\n                {/*플레이 리스트 안 음악 개수*/}\r\n                <span className=\"audio-lists-panel-header-num\">\r\n                    {audioLists.length}\r\n                </span>\r\n                {/*축소*/}\r\n                <span className=\"audio-lists-panel-header-actions\">\r\n                    <span className=\"audio-lists-panel-header-close-btn\"\r\n                          title={locale.closeText}\r\n                          onClick={onClosePanel}\r\n                    >\r\n                        {icon.close}\r\n                    </span>\r\n                </span>\r\n            </h2>\r\n        </div>\r\n\r\n\r\n        {/*////////////////Body///////////////////////*/}\r\n        <div\r\n            className={cls('audio-lists-panel-content', {\r\n                'no-content': audioLists.length < 1,\r\n            })}\r\n        >\r\n            {audioLists.length > 0 ?\r\n                (\r\n                    <ul className={SORTABLE_CONFIG.selector} id={'audioLists'}>\r\n                        {audioLists.map((audio) => {\r\n                            let { name, singer, likeMode } = audio;\r\n                            const audioId = audio[PLAYER_KEY];\r\n                            const isCurrentPlaying = playId === audioId;\r\n\r\n                            return (\r\n                                <li  title={!playing? locale.clickToPlayText: isCurrentPlaying? locale.clickToPauseText: locale.clickToPlayText}\r\n                                    className={cls('audio-item', { playing: isCurrentPlaying }, { pause: !playing }, { remove: removeId === audioId },)}\r\n                                    >\r\n                                    <span onClick={() => onPlay(audioId)}>\r\n                                        <span className=\"group player-status\">\r\n                                            <span className=\"player-icons\">\r\n                                                {isCurrentPlaying && loading? icon.loading : isCurrentPlaying ? playing ? icon.pause : icon.play : undefined}\r\n                                            </span>\r\n                                        </span>\r\n                                        <span className=\"group player-name\" title={name}>\r\n                                            {name}\r\n                                        </span>\r\n                                        <span className=\"group player-singer\" title={singer}>\r\n                                            {singer}\r\n                                        </span>\r\n                                    </span>\r\n                                        <span onClick={onLikeModeChange}>\r\n                                            {likeMode? icon.like : icon.dislike}\r\n                                        </span>\r\n                                        {remove && (\r\n                                            <span\r\n                                                className=\"group player-delete\"\r\n                                                title={locale.clickToDeleteText(name)}\r\n                                                onClick={onDelete(audioId)}\r\n                                            >\r\n                                                {icon.close}\r\n                                            </span>\r\n                                        )}\r\n                                </li>\r\n                            )\r\n\r\n                        })\r\n                        }\r\n                    </ul>\r\n                )\r\n                :\r\n                (\r\n                    <ul>\r\n                        <div>{locale.emptyText}</div>\r\n                    </ul>\r\n                )\r\n\r\n            }\r\n        </div>\r\n    </div>\r\n\r\n\r\n)\r\n\r\nexport default memo(AudioComponent)\r\n","import React, {memo} from \"react\";\r\nimport {Menu, MenuItem} from \"@material-ui/core\";\r\n\r\n\r\nconst PlayListSetComponent = ({\r\nPL_ID,\r\nname,\r\nicon,\r\nlocale,\r\nonPlayListRename,\r\nonPlayListDuplicate,\r\nonPlayListDelete\r\n}) => {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    return (\r\n        <span>\r\n            <span className=\"player-icons\" onClick={event => setAnchorEl(event.currentTarget)}\r\n                  aria-controls=\"simple-menu\"\r\n                  aria-haspopup=\"true\"\r\n                  variant=\"contained\">\r\n                {icon.folderSet}\r\n            </span>\r\n            <Menu\r\n                elevation={0}\r\n                id=\"long-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={open}\r\n                transformOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                onClose={() => setAnchorEl(null)}\r\n            >\r\n                <MenuItem onClick={() => {\r\n                    setAnchorEl(null);\r\n                    onPlayListRename(PL_ID, name);\r\n                    }}>{locale.playListRename}</MenuItem>\r\n                <MenuItem onClick={() => {\r\n                    setAnchorEl(null);\r\n                    onPlayListDuplicate(PL_ID, name);\r\n                }}>{locale.playListDuplicate}</MenuItem>\r\n                <MenuItem onClick={() => {\r\n                    setAnchorEl(null);\r\n                    onPlayListDelete(PL_ID, name);\r\n                }}>{locale.playListDelete}</MenuItem>\r\n            </Menu>\r\n        </span>\r\n\r\n    )\r\n}\r\nexport default memo(PlayListSetComponent);","import React, {memo} from \"react\";\r\nimport cls from \"classnames\";\r\nimport SORTABLE_CONFIG from \"../config/sortable\";\r\nimport {Menu, MenuItem} from \"@material-ui/core\";\r\nimport PlayListSetComponent from \"./PlayListSetComponent\";\r\n\r\n/*\r\n* PlayListComponent\r\n* : my play list Component\r\n*\r\n* --미완성 부분--\r\n* 1. myPlayList 추가 부분 hide/show\r\n* */\r\nconst PlayListComponent = ({\r\nplayLists,                  //플레이 리스트 목록\r\nicon,                       //icon 목록\r\nlocale,                     //다국어\r\nremove,                     //삭제 여부(현재 미사용)\r\nonClosePanel,               //AudioListPanel 축소 이벤트\r\nonPlayListClick,            //특정 playList 선택\r\nonChangeAddPlayListName,    //플레이 리스트 추가시, 플레이 리스트 이름 이벤트(onChange)\r\nonAddPlayList,              //플레이 리스트 추가 활성화 이벤트(onClick)\r\nonAddPlayListConfirm,       //플레이 리스트 추가 버튼 이벤트(onClick)\r\nisAddPlayList,              //플레이 리스트 추가 활성화\r\naddPlayListName,            //추가하는 플레이 리스트 이름\r\n                               onPlayListRename,\r\n                               onPlayListDuplicate,\r\n                               onPlayListDelete,\r\n                               playListRenameInput,\r\n}) => {\r\n    return (\r\n        <div>\r\n            {/*////////////////Header///////////////////////*/}\r\n\r\n            <div className=\"audio-lists-panel-header\">\r\n                <h2 className=\"audio-lists-panel-header-title\">\r\n                    <span>\r\n                        {locale.playListsText} /\r\n                    </span>\r\n                    <span className=\"audio-lists-panel-header-num\">\r\n                        {playLists.length}\r\n                    </span>\r\n                    <span className=\"audio-lists-panel-header-actions\">\r\n                        <span onClick={onAddPlayList}>\r\n                            {icon.folderPlus}\r\n                        </span>\r\n       {/*                 {remove && (\r\n                            <>\r\n                                <span className=\"audio-lists-panel-header-delete-btn\"\r\n                                      title={locale.removeAudioListsText}\r\n                                      onClick={onDelete()}\r\n                                >\r\n                                   {icon.delete}\r\n                                </span>\r\n                                    <span className=\"audio-lists-panel-header-line\" />\r\n                            </>\r\n                        )}*/}\r\n                        <span className=\"audio-lists-panel-header-close-btn\"\r\n                              title={locale.closeText}\r\n                              onClick={onClosePanel}\r\n                        >\r\n                             {icon.close}\r\n                        </span>\r\n                    </span>\r\n                </h2>\r\n            </div>\r\n\r\n\r\n            {/*////////////////Body///////////////////////*/}\r\n            <div\r\n                className={cls('audio-lists-panel-content', {\r\n                    'no-content': playLists.length < 1,\r\n                })}\r\n            >\r\n                {playLists.length > 1 ?\r\n                    (\r\n                        <ul className={SORTABLE_CONFIG.selector} id={'playList'}>\r\n                            {playLists.map((playlist) => {\r\n\r\n                                let { name, PL_ID, musicCnt, isRename } = playlist;\r\n                                    return (\r\n                                        <li key={PL_ID}\r\n                                            className={'audio-item'}\r\n                                        >\r\n                                            <span onClick={() => {\r\n                                                if(!isRename){\r\n                                                    onPlayListClick(playlist);\r\n                                                }\r\n                                            }}>\r\n                                                <span className=\"group player-name\" title={name} >\r\n                                                    {isRename? (playListRenameInput(PL_ID, name)) : name}\r\n                                                </span>\r\n                                                <span>\r\n                                                    {locale.playListSongs}{musicCnt}\r\n                                                </span>\r\n\r\n                                            </span>\r\n                                            <PlayListSetComponent PL_ID={PL_ID}\r\n                                                                  name={name}\r\n                                                                  icon={icon}\r\n                                                                  locale={locale}\r\n                                                                  onPlayListRename={onPlayListRename}\r\n                                                                  onPlayListDuplicate={onPlayListDuplicate}\r\n                                                                  onPlayListDelete={onPlayListDelete}\r\n\r\n                                            />\r\n\r\n                                        </li>\r\n                                    )\r\n\r\n                            })\r\n                            }\r\n                            <li key={\"\"} draggable={\"false\"}\r\n                                className={cls({\r\n                                    'audio-lists-panel-playList-add' : !isAddPlayList\r\n                                })}\r\n                            >\r\n                                <span className=\"group player-name\">\r\n                                <input type={\"text\"} onChange={onChangeAddPlayListName} value={addPlayListName}/>\r\n                                <button onClick={onAddPlayListConfirm}>add list</button>\r\n                                </span>\r\n                            </li>\r\n\r\n                        </ul>\r\n                    )\r\n                    :\r\n                    (\r\n                        <ul>\r\n                            <div>{locale.emptyListText}</div>\r\n                        </ul>\r\n                    )\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default memo(PlayListComponent);","export default {\r\n  list: 'list',\r\n  music: 'music',\r\n}\r\n","import cls from 'classnames'\r\nimport React, { memo } from 'react'\r\n\r\nimport SORTABLE_CONFIG from '../config/sortable'\r\nimport AudioComponent from \"./AudioComponent\"\r\nimport PlayListComponent from \"./PlayListComponent\";\r\nimport PLAY_LIST_MODE from \"../config/playListModes\";\r\n\r\nvar newAudioList=[];\r\nconst AudioListsPanel = ({\r\n/*AudioListPanel*******************************************************************/\r\npanelToggleAnimate,         //css class\r\nglassBg,                    //css class\r\nisMobile,                   //css class\r\nlistMode,                   //ListPanel 모드('list' : playlist, 'music' : audioList)\r\n\r\n/*공통******************************************************************************/\r\nlocale,                     //다국어\r\nicon,                       //icon 목록\r\nremove,                     //삭제여부\r\nonClosePanel,               //AudioListPanel 축소 이벤트\r\n\r\n/*PlayListComponent****************************************************************/\r\nplayLists,                  //플레이 리스트 목록\r\nonPlayListClick,            //특정 플레이 리스트 선택\r\nonChangeAddPlayListName,    //플레이 리스트 추가시, 플레이 리스트 이름 이벤트(onChange)\r\nonAddPlayList,              //플레이 리스트 추가 활성화 이벤트(onClick)\r\nonAddPlayListConfirm,       //플레이 리스트 추가 버튼 이벤트(onClick)\r\nisAddPlayList,              //플레이 리스트 추가 활성화\r\naddPlayListName,            //추가하는 플레이 리스트 이름\r\n                             onPlayListRename,\r\n                             onPlayListDuplicate,\r\n                             onPlayListDelete,\r\n                             playListRenameInput,\r\n\r\n/*AudioComponent*******************************************************************/\r\naudioLists,                 //음악리스트\r\nplaying,                    //재생 여부\r\nplayId,                     //재생중인 음악 id\r\nonPlay,                     //음악 재생 이벤트\r\nremoveId,                   //삭제하는 음악 id\r\nonDelete,                   //음악 삭제 버튼 이벤트(onClick)\r\nloading,                    //로딩 여부\r\nplayListName,               //플레이 리스트 명\r\nonBackClick,                //뒤로가기 이벤트(onClick)(플레이 리스트 목록으로 이동)\r\nonLikeModeChange            //like 모드 이벤트(onClick)\r\n}) => {\r\n  return (\r\n      <div\r\n          className={cls('audio-lists-panel', panelToggleAnimate, {\r\n            'audio-lists-panel-mobile': isMobile,\r\n            'glass-bg': glassBg,\r\n          })}\r\n      >\r\n        {/*////////////////Header///////////////////////*/}\r\n        {listMode === PLAY_LIST_MODE.list ?\r\n            (\r\n                <PlayListComponent\r\n                    playLists = {playLists}\r\n                    icon = {icon}\r\n                    locale = {locale}\r\n                    remove = {remove}\r\n                    onClosePanel = {onClosePanel}\r\n                    onAddPlayList = {onAddPlayList}\r\n                    onPlayListClick={onPlayListClick}\r\n                    onChangeAddPlayListName = {onChangeAddPlayListName}\r\n                    onAddPlayListConfirm={onAddPlayListConfirm}\r\n                    isAddPlayList = {isAddPlayList}\r\n                    addPlayListName = {addPlayListName}\r\n                    onPlayListRename={onPlayListRename}\r\n                    onPlayListDuplicate={onPlayListDuplicate}\r\n                    onPlayListDelete={onPlayListDelete}\r\n                    playListRenameInput={playListRenameInput}\r\n                />\r\n            )\r\n            :\r\n            (\r\n                <AudioComponent\r\n                    audioLists = {audioLists}\r\n                    locale = {locale}\r\n                    icon = {icon}\r\n                    playing = {playing}\r\n                    playId = {playId}\r\n                    onPlay = {onPlay}\r\n                    removeId = {removeId}\r\n                    remove = {remove}\r\n                    onDelete = {onDelete}\r\n                    loading = {loading}\r\n                    playListName = {playListName}\r\n                    onClosePanel = {onClosePanel}\r\n                    onBackClick = {onBackClick}\r\n                    onLikeModeChange = {onLikeModeChange}\r\n                />\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n  )\r\n}\r\n\r\nexport default memo(AudioListsPanel)\r\n","// 迷你模式进度条\r\nimport React, { memo } from 'react'\r\n\r\nconst CircleProcessBar = ({ progress = 0, r = 40 } = {}) => {\r\n  const currentProgress = progress.toFixed(2)\r\n  const perimeter = Math.PI * 2 * r\r\n  const strokeDasharray = `${Math.floor(\r\n    perimeter * currentProgress,\r\n  )} ${Math.floor(perimeter * (1 - currentProgress))}`\r\n  return (\r\n    <svg className=\"audio-circle-process-bar\">\r\n      <circle\r\n        cx={r}\r\n        cy={r}\r\n        r={r - 1}\r\n        fill=\"none\"\r\n        className=\"stroke\"\r\n        strokeDasharray={strokeDasharray}\r\n      />\r\n      <circle\r\n        cx={r}\r\n        cy={r}\r\n        r={r - 1}\r\n        fill=\"none\"\r\n        className=\"bg\"\r\n        strokeDasharray=\"0 1000\"\r\n      />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default memo(CircleProcessBar)\r\n","import React from 'react';\r\n\r\nimport { FaPauseCircle } from '@react-icons/all-files/fa/FaPauseCircle';\r\nimport { FaPlayCircle } from '@react-icons/all-files/fa/FaPlayCircle';\r\n\r\nexport { FaBook as LyricIcon } from '@react-icons/all-files/fa/FaBook';\r\nexport { FaHeadphones as FaHeadphonesIcon } from '@react-icons/all-files/fa/FaHeadphones';\r\nexport { FaRegMinusSquare as FaMinusSquareOIcon } from '@react-icons/all-files/fa/FaRegMinusSquare';\r\nexport { FaSpinner as LoadIcon } from '@react-icons/all-files/fa/FaSpinner';\r\nexport { FaSyncAlt as ReloadIcon } from '@react-icons/all-files/fa/FaSyncAlt';\r\nexport { FiChevronsDown as ArrowDownIcon } from '@react-icons/all-files/fi/FiChevronsDown';\r\nexport { GoMute as VolumeMuteIcon } from '@react-icons/all-files/go/GoMute';\r\nexport { GoUnmute as VolumeUnmuteIcon } from '@react-icons/all-files/go/GoUnmute';\r\nexport { MdClose as CloseIcon } from '@react-icons/all-files/md/MdClose';\r\nexport { MdLibraryMusic as EmptyIcon } from '@react-icons/all-files/md/MdLibraryMusic';\r\nexport { MdRepeat as RepeatIcon } from '@react-icons/all-files/md/MdRepeat';\r\nexport { MdRepeatOne as LoopIcon } from '@react-icons/all-files/md/MdRepeatOne';\r\nexport { MdSkipPrevious as PrevAudioIcon } from '@react-icons/all-files/md/MdSkipPrevious';\r\nexport { MdViewHeadline as OrderPlayIcon } from '@react-icons/all-files/md/MdViewHeadline';\r\nexport { MdSkipNext as NextAudioIcon } from '@react-icons/all-files/md/MdSkipNext';\r\nexport { RiDeleteBinLine as DeleteIcon } from '@react-icons/all-files/ri/RiDeleteBinLine';\r\nexport { RiPlayList2Fill as PlayListsIcon } from '@react-icons/all-files/ri/RiPlayList2Fill';\r\nexport { TiArrowShuffle as ShufflePlayIcon } from '@react-icons/all-files/ti/TiArrowShuffle';\r\nexport { TiDownload as DownloadIcon } from '@react-icons/all-files/ti/TiDownload';\r\nexport { RiHeart3Fill as LikeIcon } from '@react-icons/all-files/ri/RiHeart3Fill';\r\nexport { RiHeart3Line as DisLikeIcon } from '@react-icons/all-files/ri/RiHeart3Line';\r\nexport { GoDiffAdded as FolderPlusIcon } from '@react-icons/all-files/go/GoDiffAdded';\r\nexport { GoKebabHorizontal as FolderSetIcon } from '@react-icons/all-files/go/GoKebabHorizontal';\r\nexport { GoChevronLeft as BackIcon } from '@react-icons/all-files/go/GoChevronLeft';\r\nexport { GoCheck as ConfirmIcon } from '@react-icons/all-files/go/GoCheck';\r\n\r\nexport const AnimatePlayIcon = () => (\r\n  <FaPlayCircle className=\"react-jinke-music-player-play-icon\" />\r\n)\r\nexport const AnimatePauseIcon = () => (\r\n  <FaPauseCircle className=\"react-jinke-music-player-pause-icon\" />\r\n)\r\n","import cls from 'classnames'\r\nimport React, { memo } from 'react'\r\n\r\nconst PlayModel = ({ visible, value }) => (\r\n  <div\r\n    className={cls('play-mode-title', {\r\n      'play-mode-title-visible': visible,\r\n    })}\r\n  >\r\n    {value}\r\n  </div>\r\n)\r\n\r\nexport default memo(PlayModel)\r\n","export default {\r\n  en_US: 'en_US',\r\n  zh_CN: 'zh_CN',\r\n}\r\n","export const MEDIA_QUERY = {\r\n  MOBILE: '(max-width: 768px) and (orientation : portrait)',\r\n  DARK_THEME: 'screen and (prefers-color-scheme: dark)',\r\n  LIGHT_THEME: 'screen and (prefers-color-scheme: light)',\r\n}\r\n","export const MODE = {\r\n  FULL: 'full',\r\n  MINI: 'mini',\r\n}\r\n","export const AUDIO_NETWORK_STATE = {\r\n  NETWORK_EMPTY: 0, // 未初始化\r\n  NETWORK_IDLE: 1, // 未使用网络 304 缓存\r\n  NETWORK_LOADING: 2, // 浏览器正在下载数据\r\n  NETWORK_NO_SOURCE: 3, // 未找到资源\r\n  NETWORK_READY_SUCCESS_STATE: 4, // 成功\r\n}\r\n\r\nexport const AUDIO_READY_STATE = {\r\n  HAVE_NOTHING: 0, // 没有关于音频/视频是否就绪的信息\r\n  HAVE_METADATA: 1, // 关于音频/视频就绪的元数据\r\n  HAVE_CURRENT_DATA: 2, // 关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧/毫秒\r\n  HAVE_FUTURE_DATA: 3, // 当前及至少下一帧的数据是可用的\r\n  HAVE_ENOUGH_DATA: 4, // 可用数据足以开始播放\r\n}\r\n","export default {\r\n  order: 'order',\r\n  orderLoop: 'orderLoop',\r\n  singleLoop: 'singleLoop',\r\n  shufflePlay: 'shufflePlay',\r\n}\r\n","export const THEME = {\r\n  LIGHT: 'light',\r\n  DARK: 'dark',\r\n  AUTO: 'auto',\r\n}\r\n","export const PROGRESS_BAR_SLIDER_OPTIONS = {\r\n  min: 0,\r\n  step: 1,\r\n}\r\n\r\nexport const VOLUME_BAR_SLIDER_OPTIONS = {\r\n  min: 0,\r\n  max: 1,\r\n  step: 0.01,\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport Locale from './locale'\r\nimport { MODE } from './mode'\r\nimport { THEME } from './theme'\r\n\r\nconst playModePropTypes = PropTypes.oneOf([\r\n  'order',\r\n  'orderLoop',\r\n  'singleLoop',\r\n  'shufflePlay',\r\n])\r\n\r\nexport default {\r\n  myPlayLists : PropTypes.array.isRequired,\r\n  audioLists: PropTypes.array.isRequired,\r\n  locale: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.oneOf(Object.values(Locale)),\r\n  ]),\r\n  theme: PropTypes.oneOf(Object.values(THEME)),\r\n  mode: PropTypes.oneOf(Object.values(MODE)),\r\n  defaultPlayMode: playModePropTypes,\r\n  playMode: playModePropTypes,\r\n  drag: PropTypes.bool,\r\n  seeked: PropTypes.bool,\r\n  autoPlay: PropTypes.bool,\r\n  clearPriorAudioLists: PropTypes.bool,\r\n  autoPlayInitLoadPlayList: PropTypes.bool,\r\n  playModeText: PropTypes.object,\r\n  panelTitle: PropTypes.string,\r\n  closeText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  openText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  clickToPlayText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  clickToPauseText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  nextTrackText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  previousTrackText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  reloadText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  volumeText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  playListsText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  toggleLyricText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  toggleMiniModeText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  destroyText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  downloadText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  emptyText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  controllerTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  defaultPosition: PropTypes.shape({\r\n    top: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    left: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    right: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    bottom: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  }),\r\n  onAudioPlay: PropTypes.func,\r\n  onAudioPause: PropTypes.func,\r\n  onAudioEnded: PropTypes.func,\r\n  onAudioAbort: PropTypes.func,\r\n  onAudioVolumeChange: PropTypes.func,\r\n  onAudioError: PropTypes.func,\r\n  onAudioProgress: PropTypes.func,\r\n  onAudioSeeked: PropTypes.func,\r\n  onAudioDownload: PropTypes.func,\r\n  onAudioReload: PropTypes.func,\r\n  onThemeChange: PropTypes.func,\r\n  onAudioListsChange: PropTypes.func,\r\n  onPlayModeChange: PropTypes.func,\r\n  onModeChange: PropTypes.func,\r\n  onAudioListsPanelChange: PropTypes.func,\r\n  onAudioPlayTrackChange: PropTypes.func,\r\n  onAudioListsSortEnd: PropTypes.func,\r\n  onAudioLyricChange: PropTypes.func,\r\n  showDownload: PropTypes.bool,\r\n  showPlay: PropTypes.bool,\r\n  showReload: PropTypes.bool,\r\n  showPlayMode: PropTypes.bool,\r\n  showThemeSwitch: PropTypes.bool,\r\n  showMiniModeCover: PropTypes.bool,\r\n  toggleMode: PropTypes.bool,\r\n  once: PropTypes.bool,\r\n  extendsContent: PropTypes.oneOfType([\r\n    PropTypes.array,\r\n    PropTypes.bool,\r\n    PropTypes.object,\r\n    PropTypes.node,\r\n    PropTypes.element,\r\n    PropTypes.string,\r\n  ]),\r\n  checkedText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  unCheckedText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  defaultVolume: PropTypes.number,\r\n  playModeShowTime: PropTypes.number,\r\n  bounds: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  showMiniProcessBar: PropTypes.bool,\r\n  loadAudioErrorPlayNext: PropTypes.bool,\r\n  preload: PropTypes.oneOfType([\r\n    PropTypes.bool,\r\n    PropTypes.oneOf(['auto', 'metadata', 'none']),\r\n  ]),\r\n  glassBg: PropTypes.bool,\r\n  remember: PropTypes.bool,\r\n  remove: PropTypes.bool,\r\n  defaultPlayIndex: PropTypes.number,\r\n  playIndex: PropTypes.number,\r\n  lyricClassName: PropTypes.string,\r\n  emptyLyricText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  showLyric: PropTypes.bool,\r\n  getContainer: PropTypes.func,\r\n  getAudioInstance: PropTypes.func,\r\n  onBeforeAudioDownload: PropTypes.func,\r\n  autoHiddenCover: PropTypes.bool,\r\n  spaceBar: PropTypes.bool,\r\n  showDestroy: PropTypes.bool,\r\n  onBeforeDestroy: PropTypes.func,\r\n  onDestroyed: PropTypes.func,\r\n  customDownloader: PropTypes.func,\r\n  audioTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  responsive: PropTypes.bool,\r\n  quietUpdate: PropTypes.bool,\r\n  renderAudioTitle: PropTypes.func,\r\n  mobileMediaQuery: PropTypes.string,\r\n  volumeFade: PropTypes.shape({\r\n    fadeIn: PropTypes.number,\r\n    fadeOut: PropTypes.number,\r\n  }),\r\n  sortableOptions: PropTypes.object,\r\n}\r\n","export const VOLUME_FADE = {\r\n  IN: 'in',\r\n  OUT: 'out',\r\n  NONE: 'none',\r\n}\r\n","import React from 'react'\r\nimport { FaHeadphonesIcon } from '../components/Icon'\r\n\r\nexport default {\r\n  playModeText: {\r\n    order: 'Play in order',\r\n    orderLoop: 'List loop',\r\n    singleLoop: 'Single loop',\r\n    shufflePlay: 'Shuffle playback',\r\n  },\r\n  likeModeText : {\r\n    like : 'Like',\r\n    dislike : 'Dislike',\r\n  },\r\n  openText: 'Open',\r\n  closeText: 'Close',\r\n  emptyText: 'There are no registered songs.',\r\n  clickToPlayText: 'Click to play',\r\n  clickToPauseText: 'Click to pause',\r\n  nextTrackText: 'Next track',\r\n  previousTrackText: 'Previous track',\r\n  reloadText: 'Reload',\r\n  volumeText: 'Volume',\r\n  playListsText: 'My Play List',\r\n  toggleLyricText: 'Toggle lyric',\r\n  toggleMiniModeText: 'Minimize',\r\n  destroyText: 'Destroy',\r\n  downloadText: 'Download',\r\n  lightThemeText: 'L',\r\n  darkThemeText: 'D',\r\n  switchThemeText: 'Dark/Light mode',\r\n  removeAudioListsText: 'Delete audio lists',\r\n  clickToDeleteText: (name) => `Click to delete ${name}`,\r\n  controllerTitle: <FaHeadphonesIcon />,\r\n  emptyLyricText: 'No lyric',\r\n  emptyListText: 'There are no registered lists.',\r\n  loadingText: 'Loading',\r\n  playListSongs: 'songs : ',\r\n  folderPlusText : 'Folder Plus',\r\n  playListRename : 'Rename',\r\n  playListDuplicate : 'Duplicate',\r\n  playListDelete : 'Delete',\r\n  confirm : 'confirm'\r\n}\r\n","import React from 'react'\r\nimport { FaHeadphonesIcon } from '../components/Icon'\r\n\r\nexport default {\r\n  playModeText: {\r\n    order: '顺序播放',\r\n    orderLoop: '列表循环',\r\n    singleLoop: '单曲循环',\r\n    shufflePlay: '随机播放',\r\n  },\r\n  openText: '打开',\r\n  closeText: '关闭',\r\n  emptyText: '音乐播放列表为空',\r\n  clickToPlayText: '点击播放',\r\n  clickToPauseText: '点击暂停',\r\n  nextTrackText: '下一首',\r\n  previousTrackText: '上一首',\r\n  reloadText: '重新播放',\r\n  volumeText: '音量',\r\n  playListsText: '播放列表',\r\n  toggleLyricText: '显示/隐藏 歌词',\r\n  toggleMiniModeText: '切换至迷你模式',\r\n  destroyText: '移除播放器',\r\n  downloadText: '下载',\r\n  lightThemeText: '亮',\r\n  darkThemeText: '暗',\r\n  switchThemeText: '暗黑/明亮 主题',\r\n  removeAudioListsText: '清空播放列表',\r\n  clickToDeleteText: (name) => `点击删除 ${name}`,\r\n  controllerTitle: <FaHeadphonesIcon />,\r\n  emptyLyricText: '暂无歌词',\r\n  loadingText: '加载中',\r\n}\r\n","/* eslint-disable camelcase */\r\nimport LOCALE from '../config/locale'\r\nimport en_US from './en_US'\r\nimport zh_CN from './zh_CN'\r\n\r\nconst locale = {\r\n  [LOCALE.en_US]: en_US,\r\n  [LOCALE.zh_CN]: zh_CN,\r\n}\r\n\r\nexport default locale\r\n","// use by https://github.com/ustbhuangyi/lyric-parser\r\n\r\nconst timeExp = /\\[(\\d{2,}):(\\d{2})(?:\\.(\\d{2,3}))?]/g\r\n\r\nconst STATE_PAUSE = 0\r\nconst STATE_PLAYING = 1\r\n\r\nconst tagRegMap = {\r\n  title: 'ti',\r\n  artist: 'ar',\r\n  album: 'al',\r\n  offset: 'offset',\r\n  by: 'by',\r\n}\r\n\r\nexport default class Lyric {\r\n  constructor(lrc, handler = () => {}) {\r\n    this.lrc = lrc\r\n    this.tags = {}\r\n    this.lines = []\r\n    this.handler = handler\r\n    this.state = STATE_PAUSE\r\n    this.curLine = 0\r\n\r\n    this._init()\r\n  }\r\n\r\n  _init() {\r\n    this._initTag()\r\n\r\n    this._initLines()\r\n  }\r\n\r\n  _initTag() {\r\n    for (const tag in tagRegMap) {\r\n      const matches = this.lrc.match(\r\n        new RegExp(`\\\\[${tagRegMap[tag]}:([^\\\\]]*)]`, 'i'),\r\n      )\r\n      this.tags[tag] = (matches && matches[1]) || ''\r\n    }\r\n  }\r\n\r\n  _initLines() {\r\n    this.lines = [];\r\n    const lines = this.lrc.split('\\n');\r\n    const offset = parseInt(this.tags.offset, 10) || 0\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i]\r\n      const result = timeExp.exec(line)\r\n      if (result) {\r\n        const txt = line.replace(timeExp, '').trim()\r\n        if (txt) {\r\n          this.lines.push({\r\n            time:\r\n              result[1] * 60 * 1000 +\r\n              result[2] * 1000 +\r\n              (result[3] || 0) * 10 +\r\n              offset,\r\n            txt,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    this.lines.sort((a, b) => {\r\n      return a.time - b.time\r\n    })\r\n  }\r\n\r\n  _findCurNum(time) {\r\n    for (let i = 0; i < this.lines.length; i++) {\r\n      if (time <= this.lines[i].time) {\r\n        return i\r\n      }\r\n    }\r\n    return this.lines.length - 1\r\n  }\r\n\r\n  _callHandler(i) {\r\n    if (i < 0) {\r\n      return\r\n    }\r\n    if(this.lines[i].txt === ''){\r\n      this.handler({\r\n        txt: '',\r\n        lineNum: 0,\r\n      })\r\n    }else{\r\n      this.handler({\r\n        txt: this.lines[i].txt,\r\n        lineNum: i,\r\n      })\r\n    }\r\n  }\r\n\r\n  _playRest() {\r\n    const line = this.lines[this.curNum]\r\n    const delay = line.time - (+new Date() - this.startStamp)\r\n\r\n    this.timer = setTimeout(() => {\r\n      this._callHandler(this.curNum++)\r\n      if (this.curNum < this.lines.length && this.state === STATE_PLAYING) {\r\n        this._playRest()\r\n      }\r\n    }, delay)\r\n  }\r\n\r\n  play(startTime = 0, skipLast) {\r\n    if (!this.lines.length) {\r\n      return\r\n    }\r\n    this.state = STATE_PLAYING\r\n\r\n    this.curNum = this._findCurNum(startTime)\r\n    this.startStamp = +new Date() - startTime\r\n\r\n    if (!skipLast) {\r\n      this._callHandler(this.curNum - 1)\r\n    }\r\n\r\n    if (this.curNum < this.lines.length) {\r\n      clearTimeout(this.timer)\r\n      this._playRest()\r\n    }\r\n  }\r\n\r\n  togglePlay() {\r\n    const now = +new Date()\r\n    if (this.state === STATE_PLAYING) {\r\n      this.stop()\r\n      this.pauseStamp = now\r\n    } else {\r\n      this.state = STATE_PLAYING\r\n      this.play((this.pauseStamp || now) - (this.startStamp || now), true)\r\n      this.pauseStamp = 0\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.state = STATE_PAUSE\r\n    clearTimeout(this.timer)\r\n  }\r\n\r\n  seek(offset) {\r\n    this.play(offset)\r\n  }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable radix */\r\n/* eslint-disable no-bitwise */\r\nexport function formatTime(second) {\r\n  let i = 0\r\n  let h = 0\r\n  let s = parseInt(second)\r\n  if (s >= 60) {\r\n    i = parseInt(s / 60)\r\n    s = parseInt(s % 60)\r\n    if (i >= 60) {\r\n      h = parseInt(i / 60)\r\n      i = parseInt(i % 60)\r\n    }\r\n  }\r\n  // 补零\r\n  const zero = (v) => (v >> 0 < 10 ? `0${v}` : v)\r\n  if (h > 0) return [zero(h), zero(i), zero(s)].join(':')\r\n  return [zero(i), zero(s)].join(':')\r\n}\r\n\r\nexport function createRandomNum(minNum, maxNum) {\r\n  return parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10)\r\n}\r\n\r\nexport function distinct(array) {\r\n  return array\r\n    .map((item) => JSON.stringify(item))\r\n    .filter((item, idx, arr) => idx === arr.indexOf(item))\r\n    .map((item) => JSON.parse(item))\r\n}\r\n\r\nexport const arrayEqual = (arr1) => (arr2) =>\r\n  JSON.stringify(arr1) === JSON.stringify(arr2)\r\n\r\nconst s4 = () => {\r\n  return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\r\n}\r\n// Generate a pseudo-GUID by concatenating random hexadecimal.\r\nexport const uuId = () => {\r\n  return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`\r\n}\r\n\r\nexport const isSafari = () => {\r\n  return (\r\n    /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent)\r\n  )\r\n}\r\n\r\n// https://stackoverflow.com/a/9039885/2789451\r\nexport function isIOS() {\r\n  return (\r\n    [\r\n      'iPad Simulator',\r\n      'iPhone Simulator',\r\n      'iPod Simulator',\r\n      'iPad',\r\n      'iPhone',\r\n      'iPod',\r\n    ].includes(navigator.platform) ||\r\n    // iPad on iOS 13 detection\r\n    (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\r\n  )\r\n}\r\n\r\n// https://stackoverflow.com/questions/7451508/html5-audio-playback-with-fade-in-and-fade-out\r\nexport function swing(p) {\r\n  return 0.5 - Math.cos(p * Math.PI) / 2\r\n}\r\n\r\nexport function adjustVolume(\r\n  element,\r\n  startVolume,\r\n  endVolume,\r\n  { duration = 1000, easing = swing, interval = 13 } = {},\r\n  callback,\r\n) {\r\n  let delta = endVolume - startVolume\r\n\r\n  if (!delta || !duration || !easing || !interval || isIOS()) {\r\n    element.volume = endVolume\r\n    callback()\r\n    return { fadeInterval: undefined, updateIntervalEndVolume: undefined }\r\n  }\r\n\r\n  const ticks = Math.floor(duration / interval)\r\n  let tick = 1\r\n\r\n  const updateIntervalEndVolume = (newVolume) => {\r\n    endVolume = newVolume\r\n  }\r\n\r\n  const timer = setInterval(() => {\r\n    // End volume may have changed in middle of fading\r\n    const newDelta = endVolume - startVolume\r\n    if (newDelta !== delta) {\r\n      delta = newDelta\r\n    }\r\n\r\n    element.volume = startVolume + easing(tick / ticks) * delta\r\n    if (++tick >= ticks) {\r\n      element.volume = endVolume\r\n      clearInterval(timer)\r\n      callback()\r\n    }\r\n  }, interval)\r\n\r\n  return {\r\n    fadeInterval: timer,\r\n    updateIntervalEndVolume,\r\n  }\r\n}\r\n","import React, { useEffect, useRef, useState, memo } from \"react\";\r\n\r\nimport WaveSurfer from \"wavesurfer.js\";\r\n\r\nconst formWaveSurferOptions = (ref) => ({\r\n    container: ref,\r\n    waveColor: \"#eee\",\r\n    progressColor: \"OrangeRed\",\r\n    cursorColor: \"OrangeRed\",\r\n    barWidth: 2,\r\n    barRadius: 3,\r\n    responsive: true,\r\n    height: 150,\r\n    // If true, normalize by the maximum peak instead of 1.0.\r\n    normalize: true,\r\n    // Use the PeakCache to improve rendering speed of large waveforms.\r\n    partialRender: true,\r\n    hideScrollbar: true,\r\n    displayMilliseconds: true,\r\n    debug: true,\r\n    controls : true,\r\n});\r\n\r\nconst Waveform = ({\r\nwave,   //기본 Wave\r\nurl,    //Wave 주소\r\nonSeek  //Wave 수동으로 변경시 이벤트(On Seek)\r\n} = {}) => {\r\n    const waveformRef = useRef(null);\r\n\r\n    // create new WaveSurfer instance\r\n    // On component mount and when url changes\r\n    useEffect(() => {\r\n\r\n        wave.current = WaveSurfer.create(formWaveSurferOptions(waveformRef.current));\r\n\r\n        wave.current.load(url);\r\n\r\n        wave.current.setMute(true);\r\n\r\n        wave.current.on('seek', onSeek);\r\n\r\n        // Removes events, elements and disconnects Web Audio nodes.\r\n        // when component unmount\r\n        return () => wave.current.destroy();\r\n    }, [url]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"waveform\" ref={waveformRef} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Waveform);\r\n","import React, { memo } from 'react'\r\nimport { Lrc } from \"react-lrc\";\r\n\r\n\r\nconst DefaultLyrics = ({\r\nlyrics,                 //전체 가사\r\ncurrentMillisecond,     //현재 재생 시간(currentSecond * 1000)\r\n}) => {\r\n    return(\r\n    <Lrc\r\n        lrc={lyrics}\r\n        currentMillisecond={currentMillisecond}\r\n        autoScroll={true}\r\n        style={{width:400,height:800}}\r\n        lineRenderer={({ index, active, line }) => (\r\n            <div\r\n                style={{\r\n                    fontSize: active ? \"20px\" : \"18px\",\r\n                    color: active ? \"red\" : \"#333\",\r\n                    fontWeight: active ? 500 : 300,\r\n                    lineHeight: \"40px\"\r\n                }}\r\n            >\r\n                {line.content}\r\n            </div>\r\n        )}\r\n    />);\r\n\r\n};\r\n\r\nexport default memo(DefaultLyrics)","/**\r\n * @name react-jinke-music-player\r\n * @description Maybe the best beautiful HTML5 responsive player component for react :)\r\n * @author Jinke.Li <1359518268@qq.com>\r\n * @license MIT\r\n */\r\n\r\nimport cls from 'classnames';\r\nimport download from 'downloadjs';\r\nimport getIsMobile from 'is-mobile';\r\nimport Slider from 'rc-slider/lib/Slider';\r\nimport Switch from 'rc-switch';\r\nimport React, {cloneElement, Component, createRef, PureComponent, useRef} from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport Draggable from 'react-draggable';\r\nimport Sortable, { Swap } from 'sortablejs';\r\nimport AudioListsPanel from './components/AudioListsPanel';\r\nimport CircleProcessBar from './components/CircleProcessBar';\r\n\r\nimport {\r\n    AnimatePauseIcon,\r\n    AnimatePlayIcon,\r\n    ArrowDownIcon,\r\n    CloseIcon,\r\n    DeleteIcon,\r\n    DownloadIcon,\r\n    EmptyIcon,\r\n    FaMinusSquareOIcon,\r\n    LoadIcon,\r\n    LoopIcon,\r\n    LyricIcon,\r\n    NextAudioIcon,\r\n    OrderPlayIcon,\r\n    PlayListsIcon,\r\n    PrevAudioIcon,\r\n    ReloadIcon,\r\n    RepeatIcon,\r\n    ShufflePlayIcon,\r\n    VolumeMuteIcon,\r\n    VolumeUnmuteIcon,\r\n    LikeIcon,\r\n    FolderPlusIcon,\r\n    DisLikeIcon,\r\n    FolderSetIcon,\r\n    BackIcon, ConfirmIcon,\r\n} from './components/Icon';\r\nimport PlayModel from './components/PlayModel';\r\nimport { AUDIO_LIST_REMOVE_ANIMATE_TIME } from './config/animate';\r\nimport { SPACE_BAR_KEYCODE } from './config/keycode';\r\nimport LOCALE from './config/locale';\r\nimport { MEDIA_QUERY } from './config/mediaQuery';\r\nimport { MODE } from './config/mode';\r\nimport { AUDIO_NETWORK_STATE, AUDIO_READY_STATE } from './config/audioState';\r\nimport PLAY_MODE from './config/playMode';\r\nimport PROP_TYPES from './config/propTypes';\r\nimport PLAY_LIST_MODE from './config/playListModes'\r\nimport { PROGRESS_BAR_SLIDER_OPTIONS, VOLUME_BAR_SLIDER_OPTIONS} from './config/slider';\r\nimport { THEME } from './config/theme';\r\nimport { VOLUME_FADE } from './config/volumeFade';\r\nimport { DEFAULT_PLAY_INDEX,\r\n    DEFAULT_VOLUME,\r\n    DEFAULT_REMOVE_ID,\r\n    PLAYER_KEY } from './config/player';\r\nimport SORTABLE_CONFIG from './config/sortable';\r\nimport LOCALE_CONFIG from './locale';\r\nimport Lyric from './lyric';\r\nimport { adjustVolume,\r\n    arrayEqual,\r\n    createRandomNum,\r\n    formatTime,\r\n    isSafari,\r\n    uuId } from './utils';\r\nimport Waveform from \"./components/Waveform\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport DefaultLyrics from \"./components/DefaultLyrics\";\r\n\r\nSortable.mount(new Swap())\r\n\r\nconst IS_MOBILE = getIsMobile()\r\n\r\nconst DEFAULT_ICON = {\r\n    pause: <AnimatePauseIcon />,\r\n    play: <AnimatePlayIcon />,\r\n    destroy: <CloseIcon />,\r\n    close: <CloseIcon />,\r\n    delete: <DeleteIcon size={24} />,\r\n    download: <DownloadIcon size={26} />,\r\n    toggle: <FaMinusSquareOIcon />,\r\n    lyric: <LyricIcon />,\r\n    volume: <VolumeUnmuteIcon size={26} />,\r\n    mute: <VolumeMuteIcon size={26} />,\r\n    next: <NextAudioIcon />,\r\n    prev: <PrevAudioIcon />,\r\n    playLists: <PlayListsIcon />,\r\n    reload: <ReloadIcon size={22} />,\r\n    loop: <LoopIcon size={26} />,\r\n    order: <OrderPlayIcon size={26} />,\r\n    orderLoop: <RepeatIcon size={26} />,\r\n    shuffle: <ShufflePlayIcon size={26} />,\r\n    loading: <LoadIcon />,\r\n    packUpPanelMobile: <ArrowDownIcon size={26} />,\r\n    empty: <EmptyIcon />,\r\n    like : <LikeIcon/>,\r\n    dislike : <DisLikeIcon/>,\r\n    folderPlus : <FolderPlusIcon/>,\r\n    folderSet : <FolderSetIcon/>,\r\n    backIcon : <BackIcon/>,\r\n    confirmIcon : <ConfirmIcon/>\r\n}\r\n\r\nexport default class ReactJkMusicPlayer extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.audio = null;\r\n        this.targetId = 'music-player-controller';\r\n\r\n        this._PLAY_MODE_ = Object.values(PLAY_MODE);\r\n        this._PLAY_MODE_LENGTH_ = this._PLAY_MODE_.length;\r\n\r\n        this.player = createRef();\r\n        this.destroyBtn = createRef();\r\n        this.wavesurfer = createRef();\r\n\r\n        this.state = {\r\n            audioLists: [],          //음악리스트\r\n            myPlayLists: [],         //플레이리스트 리스트\r\n            playId: this.initPlayId, //현재 플레이 음악 id\r\n            name: '',                //현재 플레이 음악 제목\r\n            singer: '',              //현재 플레이 음악 가수 이름\r\n            cover: '',               //현재 플레이 음악 앨범 이미지 주소\r\n            musicSrc: '',            //현재 플레이 음악 주소\r\n            likeMode: false,         //현재 플레이 음악 라이크 모드\r\n            lyric: '',               //현재 플레이 음악 가사\r\n            currentLyric: '',        //현재 플레이 음악 재생 부분 가사\r\n            isMobile: IS_MOBILE,     //모바일 여부\r\n            toggle: this.props.mode === MODE.FULL,\r\n            playing: false,          //재생 여부\r\n            currentTime: 0,          //현재 재생 시간\r\n            soundValue: DEFAULT_VOLUME * 100, //볼륨\r\n            moveX: 0,                //재생 바 x축\r\n            moveY: 0,                //재생 바 y축\r\n            loading: false,          //로딩 여부\r\n            audioListsPanelVisible: false,\r\n            playModelNameVisible: false,\r\n            theme: this.props.theme,  //테마\r\n            playMode: this.props.playMode || this.props.defaultPlayMode || '', //재생 모드\r\n            currentAudioVolume: 0, //최근 볼륨\r\n            initAnimate: false,\r\n            isInitAutoPlay: this.props.autoPlay,\r\n            isInitRemember: false,\r\n            loadedProgress: 0,\r\n            removeId: DEFAULT_REMOVE_ID,\r\n            isNeedMobileHack: IS_MOBILE,\r\n            audioLyricVisible: true,\r\n            isAutoPlayWhenUserClicked: false,\r\n            playIndex:\r\n                this.props.playIndex || this.props.defaultPlayIndex || DEFAULT_PLAY_INDEX,\r\n            canPlay: false,\r\n            currentVolumeFade: VOLUME_FADE.NONE,\r\n            currentVolumeFadeInterval: undefined,\r\n            updateIntervalEndVolume: undefined,\r\n            isAudioSeeking: false,\r\n            isResetCoverRotate: false,\r\n            defaultLyric : '',\r\n            playListMode : '',\r\n            addPlayListName : '',\r\n            renamePlayListName : '',\r\n            isAddPlayList : false,\r\n        }\r\n\r\n    }\r\n\r\n    isDrag = false;\r\n\r\n    initPlayId = '';\r\n\r\n    static defaultProps = {\r\n        audioLists: [],\r\n        myPlayLists: [],\r\n        theme: THEME.DARK,\r\n        mode: MODE.MINI,\r\n        defaultPlayMode: PLAY_MODE.order,\r\n        defaultPosition: {\r\n            left: 0,\r\n            top: 0,\r\n        },\r\n        once: false, // onAudioPlay 事件  是否只触发一次\r\n        drag: true,\r\n        toggleMode: true, // 能换在迷你 和完整模式下 互相切换\r\n        showMiniModeCover: true, // 迷你模式下 是否显示封面图\r\n        showDownload: true,\r\n        showPlay: true,\r\n        showReload: true,\r\n        showLikeMode : true,\r\n        showPlayMode: true,\r\n        showThemeSwitch: true,\r\n        showLyric: false,\r\n        playModeTipVisible: false, // 手机端切换播放模式\r\n        autoPlay: true,\r\n        defaultVolume: 1,\r\n        showProgressLoadBar: true, // 音频预加载进度\r\n        seeked: true,\r\n        playModeShowTime: 600, // 播放模式提示 显示时间,\r\n        bounds: 'body', // mini 模式拖拽的可移动边界\r\n        showMiniProcessBar: false, // 是否在迷你模式 显示进度条\r\n        loadAudioErrorPlayNext: true, // 加载音频失败时 是否尝试播放下一首\r\n        preload: false, // 是否在页面加载后立即加载音频\r\n        glassBg: false, // 是否是毛玻璃效果\r\n        remember: false, // 是否记住当前播放状态\r\n        remove: true, // 音乐是否可以删除\r\n        defaultPlayIndex: 0, // 默认播放索引\r\n        getContainer: () => document.body, // 播放器挂载的节点\r\n        autoHiddenCover: false, // 当前播放歌曲没有封面时是否自动隐藏\r\n        onBeforeAudioDownload: () => {}, // 下载前转换音频地址等\r\n        spaceBar: false, // 是否可以通过空格键 控制播放暂停\r\n        showDestroy: false,\r\n        showMediaSession: false,\r\n        locale: LOCALE.en_US,\r\n        responsive: true,\r\n        icon: DEFAULT_ICON,\r\n        quietUpdate: false, // 更新后的播放列表如果有当前正在播放的歌曲不打断当前播放状态\r\n        mobileMediaQuery: MEDIA_QUERY.MOBILE,\r\n        // 音频暂停播放 淡入淡出\r\n        volumeFade: {\r\n            fadeIn: 0,\r\n            fadeOut: 0,\r\n        },\r\n        restartCurrentOnPrev: false,\r\n        // https://github.com/SortableJS/Sortable#options\r\n        sortableOptions: {},\r\n        playListMode : PLAY_LIST_MODE.list,\r\n        playListName : '',\r\n        isAddPlayList : false,\r\n        defaultLyric : '',\r\n    }\r\n\r\n    static propTypes = PROP_TYPES;\r\n\r\n    get locale() {\r\n        const { locale } = this.props\r\n        if (typeof locale === 'string') {\r\n            return LOCALE_CONFIG[this.props.locale]\r\n        }\r\n        return locale ? { ...LOCALE_CONFIG[LOCALE.en_US], ...locale } : {}\r\n    }\r\n\r\n    get audioDuration() {\r\n        const { audioLists, playId } = this.state\r\n        if (!audioLists.length || !this.audio) {\r\n            return 0\r\n        }\r\n        const { duration } =\r\n        audioLists.find((audio) => audio[PLAYER_KEY] === playId) || {}\r\n\r\n        return Math.max(Number(duration) || this.audio.duration || 0, 0)\r\n    }\r\n\r\n    get isAudioCanPlay() {\r\n        const { autoPlay } = this.props\r\n        const { isInitAutoPlay, isAutoPlayWhenUserClicked, canPlay } = this.state\r\n        return canPlay && (isInitAutoPlay || autoPlay || isAutoPlayWhenUserClicked)\r\n    }\r\n\r\n    get iconMap() {\r\n        const Spin = () => (\r\n            <span className=\"loading group\">{this.props.icon.loading}</span>\r\n        )\r\n        return { ...DEFAULT_ICON, ...this.props.icon, loading: <Spin /> }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            className,\r\n            drag,\r\n            style,\r\n            showDownload,\r\n            showPlay,\r\n            showReload,\r\n            showPlayMode,\r\n            showLikeMode,\r\n            showThemeSwitch,\r\n            toggleMode,\r\n            showMiniModeCover,\r\n            extendsContent,\r\n            defaultPlayMode,\r\n            seeked,\r\n            showProgressLoadBar,\r\n            bounds,\r\n            defaultPosition,\r\n            showMiniProcessBar,\r\n            preload,\r\n            glassBg,\r\n            remove,\r\n            lyricClassName,\r\n            showLyric,\r\n            getContainer,\r\n            autoHiddenCover,\r\n            showDestroy,\r\n            responsive,\r\n        } = this.props\r\n\r\n        const { locale } = this\r\n\r\n        const {\r\n            toggle,\r\n            playing,\r\n            currentTime,\r\n            soundValue,\r\n            moveX,\r\n            moveY,\r\n            loading,\r\n            audioListsPanelVisible,\r\n            theme,\r\n            lyric,\r\n            cover,\r\n            musicSrc,\r\n            playId,\r\n            isMobile,\r\n            playMode,\r\n            playModeTipVisible,\r\n            playModelNameVisible,\r\n            initAnimate,\r\n            loadedProgress,\r\n            audioLists,\r\n            removeId,\r\n            currentLyric,\r\n            defaultLyric,\r\n            audioLyricVisible,\r\n            isPlayDestroyed,\r\n            isResetCoverRotate,\r\n            playListName,\r\n            addPlayListName,\r\n            renamePlayListName,\r\n            likeMode,\r\n            isAddPlayList,\r\n        } = this.state;\r\n\r\n        const preloadState =\r\n            preload === false || preload === 'none'\r\n                ? {}\r\n                : preload === true\r\n                ? { preload: 'auto' }\r\n                : { preload };\r\n\r\n        const panelToggleAnimate = initAnimate\r\n            ? { show: audioListsPanelVisible, hide: !audioListsPanelVisible }\r\n            : { show: audioListsPanelVisible };\r\n\r\n        const currentPlayMode =\r\n            PLAY_MODE[playMode || defaultPlayMode] || PLAY_MODE.order;\r\n\r\n        const currentPlayModeName = locale.playModeText[currentPlayMode];\r\n\r\n        const miniModeCoverConfig =\r\n            (showMiniModeCover && !autoHiddenCover) || (autoHiddenCover && cover)\r\n                ? {\r\n                    style: {\r\n                        backgroundImage: `url(${cover})`,\r\n                    },\r\n                }\r\n                : {};\r\n\r\n        const formattedCurrentTime = formatTime(currentTime);\r\n        const formattedAudioDuration = formatTime(this.audioDuration);\r\n\r\n        const progressHandler = seeked\r\n            ? {\r\n                onChange: this.onProgressChange,\r\n                onAfterChange: this.onAudioSeeked,\r\n            }\r\n            : {};\r\n\r\n\r\n\r\n        // 음악 재생 진행 바 태그\r\n        const ProgressBar = (\r\n            <>\r\n                {showProgressLoadBar && (\r\n                    <div\r\n                        className=\"progress-load-bar\"\r\n                        style={{ width: `${Math.min(loadedProgress, 100)}%` }}\r\n                    />\r\n                )}\r\n                <Slider\r\n                    max={Math.ceil(this.audioDuration)}\r\n                    defaultValue={0}\r\n                    value={Math.ceil(currentTime)}\r\n                    {...progressHandler}\r\n                    {...PROGRESS_BAR_SLIDER_OPTIONS}\r\n                />\r\n            </>\r\n        );\r\n\r\n        // 음악 다운로드 태그\r\n        const DownloadComponent = showDownload && (\r\n            <span\r\n                className=\"group audio-download\"\r\n                onClick={this.onAudioDownload}\r\n                title={locale.downloadText}\r\n            >\r\n        {this.iconMap.download}\r\n      </span>\r\n        );\r\n\r\n        // 테마 변경 스위치 태그\r\n        const ThemeSwitchComponent = showThemeSwitch && (\r\n            <span className=\"group theme-switch\">\r\n        <Switch\r\n            className=\"theme-switch-container\"\r\n            onChange={this.themeChange}\r\n            checkedChildren={locale.lightThemeText}\r\n            unCheckedChildren={locale.darkThemeText}\r\n            checked={theme === THEME.LIGHT}\r\n            title={locale.switchThemeText}\r\n        />\r\n      </span>\r\n        );\r\n\r\n        // 반복 재생 설정 태그\r\n        const ReloadComponent = showReload && (\r\n            <span\r\n                className=\"group reload-btn\"\r\n                onClick={this.onAudioReload}\r\n                title={locale.reloadText}\r\n            >\r\n        {this.iconMap.reload}\r\n      </span>\r\n        );\r\n\r\n        // 가사 표출 설정 태그\r\n        const LyricComponent = showLyric && (\r\n            <span\r\n                className={cls('group lyric-btn', {\r\n                    'lyric-btn-active': audioLyricVisible,\r\n                })}\r\n                onClick={this.toggleAudioLyric}\r\n                title={locale.toggleLyricText}\r\n            >\r\n        {this.iconMap.lyric}\r\n      </span>\r\n        );\r\n\r\n        // 재생 모드 태그\r\n        const PlayModeComponent = showPlayMode && (\r\n            <span\r\n                className={cls('group loop-btn')}\r\n                onClick={this.togglePlayMode}\r\n                title={locale.playModeText[currentPlayMode]}\r\n            >\r\n        {this.renderPlayModeIcon(currentPlayMode)}\r\n      </span>\r\n        );\r\n\r\n        // LIKE 모드 설정 태그\r\n        const LikeModeComponent = showLikeMode && (\r\n            <span\r\n                id = {\"likeModeSpan\"}\r\n                className={\"group loop-btn-dis\"}\r\n                onClick={this.onLikeModeChange}\r\n                title={locale.likeModeText[currentPlayMode]}\r\n            >\r\n          {this.state.likeMode? this.iconMap.like : this.iconMap.dislike}\r\n      </span>\r\n        )\r\n\r\n        const miniProcessBarR = isMobile ? 30 : 40\r\n\r\n        // music-player 제거 설정\r\n        const DestroyComponent = showDestroy && (\r\n            <span\r\n                title={locale.destroyText}\r\n                className=\"group destroy-btn\"\r\n                ref={this.destroyBtn}\r\n                onClick={!drag || toggle ? this.onDestroyPlayer : undefined}\r\n            >\r\n        {this.iconMap.destroy}\r\n      </span>\r\n        )\r\n\r\n        // seek controller\r\n        const AudioController = (\r\n            <div\r\n                className={cls('react-jinke-music-player')}\r\n                style={defaultPosition}\r\n                tabIndex=\"-1\"\r\n            >\r\n                <div className={cls('music-player')}>\r\n                    {showMiniProcessBar && (\r\n                        <CircleProcessBar\r\n                            progress={currentTime / this.audioDuration}\r\n                            r={miniProcessBarR}\r\n                        />\r\n                    )}\r\n                    <div\r\n                        id={this.targetId}\r\n                        className={cls('scale', 'music-player-controller', {\r\n                            'music-player-playing': playing,\r\n                        })}\r\n                        {...miniModeCoverConfig}\r\n                        onClick={!drag ? this.onOpenPanel : undefined}\r\n                    >\r\n                        {loading ? (\r\n                            this.iconMap.loading\r\n                        ) : (\r\n                            <>\r\n                <span className=\"controller-title\">\r\n                  {locale.controllerTitle}\r\n                </span>\r\n                                <div className=\"music-player-controller-setting\">\r\n                                    {toggle ? locale.closeText : locale.openText}\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                    {DestroyComponent}\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n\r\n\r\n        const container = getContainer() || document.body\r\n        const audioTitle = this.getAudioTitle()\r\n\r\n        if (isPlayDestroyed) {\r\n            return null\r\n        }\r\n\r\n        const shouldShowPlayIcon =\r\n            !playing || this.state.currentVolumeFade === VOLUME_FADE.OUT;\r\n\r\n\r\n        /*music-player 그리기*/\r\n        return createPortal(\r\n            <div\r\n                className={cls(\r\n                    'react-jinke-music-player-main',\r\n                    {\r\n                        'light-theme': theme === THEME.LIGHT,\r\n                        'dark-theme': theme === THEME.DARK,\r\n                    },\r\n                    className,\r\n                )}\r\n                style={style}\r\n                ref={this.player}\r\n                tabIndex=\"-1\"\r\n            >\r\n                <div>\r\n                    <h2>wavesurfer</h2>\r\n                <Waveform\r\n                    wave={this.wavesurfer}\r\n                    url={this.state.musicSrc}\r\n                    onSeek={this.onWaveSeek}\r\n                />\r\n                </div>\r\n                <br/>\r\n                <span style={{display:\"flex\"}}>\r\n                    <div className={cls('lyrics-')}>\r\n                        <h2>lyrics - all</h2>\r\n                        <DefaultLyrics\r\n                            lyrics={this.state.defaultLyric}\r\n                            currentMillisecond={this.state.currentTime * 1000}\r\n                        />\r\n                    </div>\r\n                    <p/>\r\n                    <div className=\"lyrics-editable\">\r\n                        <h2>lyrics - editable</h2>\r\n                        <TextField id=\"outlined-basic\"\r\n                                onChange = {this.onChangeEditLyrics}\r\n                                value={this.state.lyric}\r\n                                multiline\r\n                                rows=\"10\"\r\n                                style={{width : 400}}\r\n\r\n                        />\r\n                    </div>\r\n                </span>\r\n                {toggle ? undefined : drag ? (\r\n                    <Draggable\r\n                        bounds={bounds}\r\n                        position={{ x: moveX, y: moveY }}\r\n                        onDrag={this.onControllerDrag}\r\n                        onStop={this.onControllerDragStop}\r\n                        onStart={this.onControllerDragStart}\r\n                    >\r\n                        {AudioController}\r\n                    </Draggable>\r\n                ) : (\r\n                    AudioController\r\n                )}\r\n                {toggle && (!isMobile || !responsive) && (\r\n                    <div\r\n                        className={cls('music-player-panel', 'translate', {\r\n                            'glass-bg': glassBg,\r\n                        })}\r\n                    >\r\n                        <section className=\"panel-content\">\r\n                            {/* lgtm [js/trivial-conditional] */}\r\n                            {(!autoHiddenCover || (autoHiddenCover && cover)) && (\r\n                                <div\r\n                                    className={cls('img-content', 'img-rotate', {\r\n                                        'img-rotate-pause': !playing || !cover,\r\n                                        'img-rotate-reset': isResetCoverRotate,\r\n                                    })}\r\n                                    style={{ backgroundImage: `url(${cover})` }}\r\n                                    onClick={() => this.onCoverClick()}\r\n                                />\r\n                            )}\r\n                            <div className=\"audio-title\">\r\n                <span title={audioTitle}>\r\n                    {this.renderAudioTitle()}\r\n                </span>\r\n                                <div className=\"title\">{this.getOnlyAudioTitle()}</div>\r\n                            </div>\r\n                            <div className=\"progress-bar-content\">\r\n\r\n                                <section className=\"audio-main\">\r\n                  <span className=\"current-time\" title={formattedCurrentTime}>\r\n                    {loading ? '--' : formattedCurrentTime}\r\n                  </span>\r\n                                    <div className=\"progress-bar\">{ProgressBar}</div>\r\n                                    <span className=\"duration\" title={formattedAudioDuration}>\r\n                    {loading ? '--' : formattedAudioDuration}\r\n                  </span>\r\n                                </section>\r\n                            </div>\r\n                            <div className=\"player-content\">\r\n                                {ReloadComponent}\r\n\r\n                                {!showPlay ? (\r\n                                    loading && this.iconMap.loading\r\n                                ) : (\r\n                                    <span className=\"group\">\r\n                    <span\r\n                        className=\"group prev-audio\"\r\n                        title={locale.previousTrackText}\r\n                        onClick={this.onPlayPrevAudio}\r\n                    >\r\n                      {this.iconMap.prev}\r\n                    </span>\r\n                                        {loading ? (\r\n                                            <span\r\n                                                className=\"group loading-icon\"\r\n                                                title={locale.loadingText}\r\n                                            >\r\n                        {this.iconMap.loading}\r\n                      </span>\r\n                                        ) : (\r\n                                            <span\r\n                                                className=\"group play-btn\"\r\n                                                onClick={this.onTogglePlay}\r\n                                                title={\r\n                                                    shouldShowPlayIcon\r\n                                                        ? locale.clickToPlayText\r\n                                                        : locale.clickToPauseText\r\n                                                }\r\n                                            >\r\n                        {shouldShowPlayIcon\r\n                            ? this.iconMap.play\r\n                            : this.iconMap.pause}\r\n                      </span>\r\n                                        )}\r\n                                        <span\r\n                                            className=\"group next-audio\"\r\n                                            title={locale.nextTrackText}\r\n                                            onClick={this.onPlayNextAudio}\r\n                                        >\r\n                      {this.iconMap.next}\r\n                    </span>\r\n                  </span>\r\n                                )}\r\n\r\n                                {DownloadComponent}\r\n                                {ThemeSwitchComponent}\r\n                                {extendsContent || null}\r\n\r\n                                {PlayModeComponent}\r\n\r\n                                {/* 音量控制 */}\r\n                                <span className=\"group play-sounds\" title={locale.volumeText}>\r\n                  {soundValue === 0 ? (\r\n                      <span className=\"sounds-icon\" onClick={this.onResetVolume}>\r\n                      {this.iconMap.mute}\r\n                    </span>\r\n                  ) : (\r\n                      <span className=\"sounds-icon\" onClick={this.onAudioMute}>\r\n                      {this.iconMap.volume}\r\n                    </span>\r\n                  )}\r\n                                    <Slider\r\n                                        value={soundValue}\r\n                                        onChange={this.onAudioSoundChange}\r\n                                        className=\"sound-operation\"\r\n                                        {...VOLUME_BAR_SLIDER_OPTIONS}\r\n                                    />\r\n                </span>\r\n\r\n                                {LyricComponent}\r\n\r\n                                <span\r\n                                    className=\"group audio-lists-btn\"\r\n                                    title={locale.playListsText}\r\n                                    onClick={this.openAudioListsPanel}\r\n                                >\r\n                  <span className=\"audio-lists-icon\">\r\n                    {this.iconMap.playLists}\r\n                  </span>\r\n                  <span className=\"audio-lists-num\">{audioLists.length}</span>\r\n                </span>\r\n\r\n                                {toggleMode && (\r\n                                    <span\r\n                                        className=\"group hide-panel\"\r\n                                        title={locale.toggleMiniModeText}\r\n                                        onClick={this.onHidePanel}\r\n                                    >\r\n                    {this.iconMap.toggle}\r\n                  </span>\r\n                                )}\r\n\r\n                                {/*{DestroyComponent}*/}\r\n\r\n                                {LikeModeComponent}\r\n\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                )}\r\n                {/* 播放列表面板 */}\r\n                <AudioListsPanel\r\n                    playing={playing}\r\n                    playId={playId}\r\n                    loading={loading}\r\n                    visible={audioListsPanelVisible}\r\n                    audioLists={audioLists}\r\n                    onPlay={this.audioListsPlay}\r\n                    onClosePanel={this.closeAudioListsPanel}\r\n                    icon={this.iconMap}\r\n                    isMobile={isMobile}\r\n                    panelToggleAnimate={panelToggleAnimate}\r\n                    glassBg={glassBg}\r\n                    cover={cover}\r\n                    remove={remove}\r\n                    onDelete={this.onDeleteAudioLists}\r\n                    removeId={removeId}\r\n                    locale={locale}\r\n                    onLikeModeChange={this.onLikeModeChange}\r\n                    likeMode={likeMode}\r\n                    listMode = {this.state.playListMode}\r\n                    playLists = {this.state.myPlayLists}\r\n                    onPlayListClick = {this.onPlayListClick}\r\n                    playListName = {playListName}\r\n                    onBackClick = {this.onBackClick}\r\n                    onAddPlayListConfirm = {this.onAddPlayListConfirm}\r\n                    onAddPlayList = {this.onAddPlayList}\r\n                    onChangeAddPlayListName = {this.onChangeAddPlayListName}\r\n                    isAddPlayList = {isAddPlayList}\r\n                    addPlayListName = {addPlayListName}\r\n                    onPlayListRename={this.onPlayListRename}\r\n                    onPlayListDuplicate={this.onPlayListDuplicate}\r\n                    onPlayListDelete={this.onPlayListDelete}\r\n                    playListRenameInput = {this.playListRenameInput}\r\n                />\r\n                {/* 播放模式提示框 */}\r\n                {!isMobile && (\r\n                    <PlayModel\r\n                        visible={playModelNameVisible}\r\n                        value={currentPlayModeName}\r\n                    />\r\n                )}\r\n                {/* 歌词 */}\r\n                {audioLyricVisible && (\r\n                    <Draggable>\r\n                        <div className={cls('music-player-lyric', lyricClassName)}>\r\n                            {currentLyric || locale.emptyLyricText}\r\n                        </div>\r\n                    </Draggable>\r\n                )}\r\n                <audio\r\n                    className=\"music-player-audio\"\r\n                    title={audioTitle}\r\n                    {...preloadState}\r\n                    src={musicSrc}\r\n                    ref={(node) => {\r\n                        this.audio = node\r\n                    }}\r\n                />\r\n            </div>,\r\n            container,\r\n        )\r\n    }\r\n\r\n    getPlayIndex = (\r\n        playIndex = this.state.playIndex,\r\n        audioLists = this.state.audioLists,\r\n    ) => {\r\n        return Math.max(\r\n            DEFAULT_PLAY_INDEX,\r\n            Math.min(audioLists.length - 1, playIndex),\r\n        )\r\n    }\r\n\r\n    onCoverClick = (mode = MODE.FULL) => {\r\n        const { showMiniModeCover } = this.props\r\n        const { cover } = this.state\r\n        if (!showMiniModeCover && mode === MODE.MINI) {\r\n            return\r\n        }\r\n        if (this.props.onCoverClick && cover) {\r\n            this.props.onCoverClick(\r\n                mode,\r\n                this.state.audioLists,\r\n                this.getBaseAudioInfo(),\r\n            )\r\n        }\r\n    }\r\n\r\n    getAudioTitle = () => {\r\n        const { audioTitle } = this.locale || {}\r\n        const { name, singer } = this.state\r\n        if (typeof audioTitle === 'function' && this.audio) {\r\n            return audioTitle(this.getBaseAudioInfo())\r\n        }\r\n        return audioTitle || `${name}${singer ? ` - ${singer}` : ''}`\r\n    }\r\n\r\n    getOnlyAudioTitle = () => {\r\n        const { audioTitle } = this.locale || {}\r\n        const { name } = this.state\r\n        if (typeof audioTitle === 'function' && this.audio) {\r\n            return audioTitle(this.getBaseAudioInfo())\r\n        }\r\n        return audioTitle || `${name}`\r\n    }\r\n\r\n    renderAudioTitle = () => {\r\n        const { isMobile, name } = this.state\r\n        if (this.props.renderAudioTitle) {\r\n            return this.props.renderAudioTitle(this.getBaseAudioInfo(), isMobile)\r\n        }\r\n        return isMobile ? name : this.getAudioTitle()\r\n    }\r\n\r\n    toggleAudioLyric = () => {\r\n        this.setState({\r\n            audioLyricVisible: !this.state.audioLyricVisible,\r\n        })\r\n    }\r\n\r\n    // 播放模式切换\r\n    togglePlayMode = () => {\r\n        let index = this._PLAY_MODE_.findIndex(\r\n            (mode) => mode === this.state.playMode,\r\n        )\r\n        const playMode =\r\n            index === this._PLAY_MODE_LENGTH_ - 1\r\n                ? this._PLAY_MODE_[0]\r\n                : this._PLAY_MODE_[++index]\r\n        this.setState({\r\n            playMode,\r\n            playModelNameVisible: true,\r\n            playModeTipVisible: true,\r\n        })\r\n        this.props.onPlayModeChange && this.props.onPlayModeChange(playMode)\r\n\r\n        clearTimeout(this.playModelTimer)\r\n        this.playModelTimer = setTimeout(() => {\r\n            this.setState({ playModelNameVisible: false, playModeTipVisible: false })\r\n        }, this.props.playModeShowTime)\r\n    }\r\n\r\n    // 渲染播放模式 对应按钮\r\n    renderPlayModeIcon = (playMode) => {\r\n        const animateProps = {\r\n            className: 'react-jinke-music-player-mode-icon',\r\n        }\r\n        let IconNode = null\r\n        switch (playMode) {\r\n            case PLAY_MODE.order:\r\n                IconNode = cloneElement(this.iconMap.order, animateProps)\r\n                break\r\n            case PLAY_MODE.orderLoop:\r\n                IconNode = cloneElement(this.iconMap.orderLoop, animateProps)\r\n                break\r\n            case PLAY_MODE.singleLoop:\r\n                IconNode = cloneElement(this.iconMap.loop, animateProps)\r\n                break\r\n            case PLAY_MODE.shufflePlay:\r\n                IconNode = cloneElement(this.iconMap.shuffle, animateProps)\r\n                break\r\n            default:\r\n                IconNode = cloneElement(this.iconMap.order, animateProps)\r\n        }\r\n        return IconNode\r\n    }\r\n\r\n    // LIKE 아이콘 변경\r\n    renderLikeModeIcon = (likeMode) => {\r\n        const animateProps = {\r\n            className: 'react-jinke-music-player-mode-icon'\r\n        }\r\n\r\n        let IconNode = null;\r\n\r\n        switch (likeMode) {\r\n            case true:\r\n                IconNode = cloneElement(this.iconMap.like, animateProps);\r\n                break;\r\n            case false:\r\n                IconNode = cloneElement(this.iconMap.dislike, animateProps);\r\n                break;\r\n            default:\r\n                IconNode = cloneElement(this.iconMap.dislike, animateProps);\r\n        }\r\n\r\n        return IconNode;\r\n    }\r\n\r\n    /**\r\n     * 音乐列表面板选择歌曲\r\n     * 上一首 下一首\r\n     * 音乐结束\r\n     * 通用方法\r\n     * @description: ignore 如果 为 true playId相同则不暂停 适用于 随机播放,重新播放等逻辑\r\n     */\r\n    audioListsPlay = (playId, ignore = false, state = this.state) => {\r\n        const {\r\n            playId: currentPlayId,\r\n            playing,\r\n            audioLists,\r\n            loading,\r\n            canPlay,\r\n        } = state;\r\n\r\n        if (Array.isArray(audioLists) && audioLists.length === 0) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn(\r\n                'Warning: Your playlist has no songs. and cannot play !',\r\n            )\r\n        }\r\n        if (loading && playId === currentPlayId) {\r\n            return\r\n        }\r\n        const playIndex = audioLists.findIndex(\r\n            (audio) => audio[PLAYER_KEY] === playId,\r\n        )\r\n        const { name, cover, musicSrc, singer, lyric} =\r\n        audioLists[playIndex] || {}\r\n\r\n        const loadAudio = (originMusicSrc) => {\r\n\r\n            this.setState(\r\n                {\r\n                    name,\r\n                    cover,\r\n                    musicSrc: originMusicSrc,\r\n                    singer,\r\n                    playId,\r\n                    lyric,\r\n                    currentTime: 0,\r\n                    playing: false,\r\n                    loading: true,\r\n                    canPlay: false,\r\n                    loadedProgress: 0,\r\n                    playIndex,\r\n                    isAutoPlayWhenUserClicked: true,\r\n                },\r\n                () => {\r\n                    this.lyric && this.lyric.stop();\r\n                    this.audio.load();\r\n                    this.updateMediaSessionMetadata()\r\n                    setTimeout(() => {\r\n                        this.initLyricParser()\r\n                    }, 0)\r\n                },\r\n            )\r\n        }\r\n        // 如果点击当前项 就暂停 或者播放\r\n        if (playId === currentPlayId && !ignore) {\r\n            this.setState({ playing: !playing })\r\n            if (!playing) {\r\n                if (canPlay) {\r\n                    this.play()\r\n                    return\r\n                }\r\n                return loadAudio(musicSrc)\r\n            }\r\n            return this.audio.pause()\r\n        }\r\n\r\n        this.props.onAudioPlayTrackChange &&\r\n        this.props.onAudioPlayTrackChange(\r\n            playId,\r\n            audioLists,\r\n            this.getBaseAudioInfo(),\r\n        );\r\n        this.props.onPlayIndexChange && this.props.onPlayIndexChange(playIndex)\r\n\r\n        switch (typeof musicSrc) {\r\n            case 'function':\r\n                musicSrc().then(loadAudio, this.onAudioError)\r\n                break\r\n            default:\r\n                loadAudio(musicSrc)\r\n        }\r\n    }\r\n\r\n    resetAudioStatus = () => {\r\n        this.audio.pause()\r\n        this.lyric && this.lyric.stop()\r\n        this.initPlayInfo([])\r\n        this.resetAudioPlayStatus()\r\n        this.resetAudioPlayId()\r\n    }\r\n\r\n    resetAudioPlayId = () => {\r\n        this.setState({ playId: this.initPlayId })\r\n    }\r\n\r\n    clearAudioLists = () => {\r\n        this.props.onAudioListsChange && this.props.onAudioListsChange('', [], {})\r\n        this.resetAudioStatus()\r\n    }\r\n\r\n    onDeleteAudioLists = (audioId) => (e) => {\r\n        e.stopPropagation()\r\n        // 如果不 传 id  删除全部\r\n        const { audioLists, playId } = this.state\r\n        if (audioLists.length < 1) {\r\n            return\r\n        }\r\n        this.lyric && this.lyric.stop()\r\n        if (!audioId) {\r\n            this.clearAudioLists()\r\n            return\r\n        }\r\n        const newAudioLists = [...audioLists].filter(\r\n            (audio) => audio[PLAYER_KEY] !== audioId,\r\n        )\r\n        // 触发删除动画,等动画结束 删除列表\r\n        this.setState({ removeId: audioId })\r\n        setTimeout(() => {\r\n            this.setState(\r\n                {\r\n                    audioLists: newAudioLists,\r\n                    removeId: -1,\r\n                },\r\n                () => {\r\n                    if (!newAudioLists.length) {\r\n                        return this.resetAudioStatus()\r\n                    }\r\n                    // 如果删除的是当前正在播放的 顺延下一首播放\r\n                    if (audioId === playId) {\r\n                        this.handlePlay(PLAY_MODE.orderLoop)\r\n                    }\r\n                },\r\n            )\r\n        }, AUDIO_LIST_REMOVE_ANIMATE_TIME)\r\n\r\n        this.props.onAudioListsChange &&\r\n        this.props.onAudioListsChange(\r\n            playId,\r\n            newAudioLists,\r\n            this.getBaseAudioInfo(),\r\n        )\r\n    }\r\n\r\n    openAudioListsPanel = () => {\r\n        this.setState(({ audioListsPanelVisible }) => ({\r\n            initAnimate: true,\r\n            audioListsPanelVisible: !audioListsPanelVisible,\r\n        }))\r\n        this.props.onAudioListsPanelChange &&\r\n        this.props.onAudioListsPanelChange(!this.state.audioListsPanelVisible)\r\n    }\r\n\r\n    closeAudioListsPanel = (e) => {\r\n        e.stopPropagation()\r\n        this._closeAudioListsPanel()\r\n    }\r\n\r\n    _closeAudioListsPanel = () => {\r\n        const { audioListsPanelVisible } = this.state\r\n        this.setState({ audioListsPanelVisible: false })\r\n        if (audioListsPanelVisible) {\r\n            this.props.onAudioListsPanelChange &&\r\n            this.props.onAudioListsPanelChange(false)\r\n        }\r\n    }\r\n\r\n    themeChange = (isLight) => {\r\n        const theme = isLight ? THEME.LIGHT : THEME.DARK\r\n        this.setState({\r\n            theme,\r\n        })\r\n        this.props.onThemeChange && this.props.onThemeChange(theme)\r\n    }\r\n\r\n    onAudioDownload = () => {\r\n        const { musicSrc } = this.state\r\n        if (this.state.musicSrc) {\r\n            const { customDownloader } = this.props\r\n            const baseAudioInfo = this.getBaseAudioInfo()\r\n            const onBeforeAudioDownload = this.props.onBeforeAudioDownload(\r\n                baseAudioInfo,\r\n            )\r\n            let transformedDownloadAudioInfo = {}\r\n            if (onBeforeAudioDownload && onBeforeAudioDownload.then) {\r\n                onBeforeAudioDownload.then((info) => {\r\n                    const { src, filename, mimeType } = info\r\n                    transformedDownloadAudioInfo = info\r\n                    if (customDownloader) {\r\n                        customDownloader(info)\r\n                    } else {\r\n                        download(src, filename, mimeType)\r\n                    }\r\n                })\r\n            } else {\r\n                customDownloader\r\n                    ? customDownloader({ src: musicSrc })\r\n                    : download(musicSrc)\r\n            }\r\n            this.props.onAudioDownload &&\r\n            this.props.onAudioDownload(baseAudioInfo, transformedDownloadAudioInfo)\r\n        }\r\n    }\r\n\r\n    onControllerDrag = (e, { x, y }) => {\r\n        const { moveX, moveY } = this.state\r\n        this.isDrag = true\r\n\r\n        // mousedown will trigger drag event on android devices (react-draggable) :(\r\n        if (moveX === x && moveY === y) {\r\n            this.isDrag = false\r\n        }\r\n    }\r\n\r\n    onControllerDragStart = (e, { x, y }) => {\r\n        this.isDrag = false\r\n        this.setState({ moveX: x, moveY: y })\r\n    }\r\n\r\n    onControllerDragStop = (e, { x, y }) => {\r\n        if (\r\n            this.props.showDestroy &&\r\n            this.destroyBtn &&\r\n            this.destroyBtn.current &&\r\n            this.destroyBtn.current.contains(e.target)\r\n        ) {\r\n            this.onDestroyPlayer()\r\n            return\r\n        }\r\n\r\n        if (!this.isDrag) {\r\n            if (this.state.isNeedMobileHack) {\r\n                this.loadAndPlayAudio()\r\n                this.setState({ isNeedMobileHack: false })\r\n            }\r\n            this.onOpenPanel()\r\n        }\r\n        this.setState({ moveX: x, moveY: y })\r\n    }\r\n\r\n    onResetVolume = () => {\r\n        const { currentAudioVolume } = this.state\r\n        this.setAudioVolume(this.getVolumeBarValue(currentAudioVolume || 0.1))\r\n    }\r\n\r\n    setAudioVolume = (volumeBarValue) => {\r\n        this.audio.volume = this.getListeningVolume(volumeBarValue)\r\n        this.setState({\r\n            currentAudioVolume: volumeBarValue,\r\n            soundValue: volumeBarValue,\r\n        })\r\n\r\n        // Update fade-in interval to transition to new volume\r\n        if (this.state.currentVolumeFade === VOLUME_FADE.IN) {\r\n            this.state.updateIntervalEndVolume &&\r\n            this.state.updateIntervalEndVolume(volumeBarValue)\r\n        }\r\n    }\r\n\r\n    stopAll = (target) => {\r\n        target.stopPropagation()\r\n        target.preventDefault()\r\n    }\r\n\r\n    getBoundingClientRect = (ele) => {\r\n        const { left, top } = ele.getBoundingClientRect()\r\n        return {\r\n            left,\r\n            top,\r\n        }\r\n    }\r\n\r\n    getListeningVolume = (volumeBarValue) => {\r\n        return volumeBarValue ** 2\r\n    }\r\n\r\n    getVolumeBarValue = (listeningVolume) => {\r\n        return Math.sqrt(listeningVolume)\r\n    }\r\n\r\n    /*\r\n    * audio reload 클릭\r\n    */\r\n    onAudioReload = () => {\r\n        if (this.props.audioLists.length) {\r\n            this.handlePlay(PLAY_MODE.singleLoop);\r\n            this.props.onAudioReload &&\r\n            this.props.onAudioReload(this.getBaseAudioInfo());\r\n            this.onWavePositionChange(this.audio.currentTime);\r\n            if(!this.wavesurfer.current.isPlaying()){\r\n                this.wavesurfer.current.playPause();\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    * music list에서 like mode 클릭\r\n    */\r\n    onLikeModeChange = () => {\r\n        let newList = this.state.audioLists;\r\n\r\n        if(this.state.likeMode){\r\n            newList[0].likeMode = false;\r\n            this.setState({likeMode: false,\r\n                audioLists : newList});\r\n        }else {\r\n            newList[0].likeMode = true;\r\n            this.setState({likeMode: true,\r\n                audioLists : newList});\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    * play list 에 추가하는 play list 이름 변경(onChange)\r\n    */\r\n    onChangeAddPlayListName = (e) => {\r\n        this.setState({addPlayListName : e.target.value});\r\n    }\r\n\r\n    /*\r\n    * play list 추가 확인 버튼 클릭\r\n    */\r\n    onAddPlayListConfirm = () => {\r\n        const newPlayListName = this.state.addPlayListName;\r\n        const newPlayListOrder = this.state.myPlayLists.length+1;\r\n        const newPlayListID = ('PL_' + (this.state.myPlayLists.length+1));\r\n\r\n        this.setState({ myPlayLists: [\r\n                ...this.state.myPlayLists,\r\n                {\r\n                    PL_ID : newPlayListID,\r\n                    name: newPlayListName,\r\n                    order : newPlayListOrder,\r\n                    musicCnt : 0\r\n                },\r\n            ]});\r\n\r\n        this.setState({\r\n            isAddPlayList:false,\r\n            addPlayListName:''\r\n        });\r\n    }\r\n\r\n    /*\r\n    * play list에서 play list 추가 버튼 클릭\r\n    */\r\n    onAddPlayList = () => {\r\n        if(this.state.isAddPlayList){\r\n            this.setState({isAddPlayList: false,\r\n                addPlayListName:''\r\n            });\r\n        }else\r\n        {\r\n            this.setState({isAddPlayList: true});\r\n        }\r\n    }\r\n\r\n    onChangeRenamePlayListName = (e) => {\r\n        this.setState({renamePlayListName : e.target.value});\r\n    }\r\n\r\n    onRenamePlayListConfirm = () => {\r\n        //DB처리\r\n        this.setState({renamePlayListName : ''});\r\n    }\r\n\r\n    onRenamePlayListCancel = (PL_ID) => {\r\n        //DB처리\r\n        this.setState({renamePlayListName : ''});\r\n    }\r\n\r\n    playListRenameInput = (PL_ID, name) => {\r\n\r\n        return (\r\n            <span>\r\n        <input type={\"text\"} value={this.state.renamePlayListName} onChange={this.onChangeRenamePlayListName}/>\r\n        <span onClick={() => this.onRenamePlayListConfirm(PL_ID, name)}>\r\n          {this.iconMap.confirmIcon}\r\n        </span>\r\n        <span onClick={() => this.onRenamePlayListCancel(PL_ID)}>\r\n          {this.iconMap.close}\r\n        </span>\r\n      </span>\r\n        )\r\n    }\r\n\r\n    onPlayListRename = (PL_ID, name) => {\r\n        let newArray = this.state.myPlayLists;\r\n\r\n        newArray.forEach(function(element){\r\n            if(element.PL_ID === PL_ID){\r\n                element.isRename = true;\r\n            }\r\n        });\r\n\r\n        this.setState({myPlayLists : newArray,\r\n            renamePlayListName : name});\r\n    }\r\n\r\n    onPlayListDuplicate = (PL_ID, name) => {\r\n\r\n        //DB 처리\r\n        console.log(\"onPlayListDuplicate\");\r\n    }\r\n\r\n    onPlayListDelete = (PL_ID, name) => {\r\n        //DB 처리\r\n        console.log(\"onPlayListDelete\");\r\n    }\r\n\r\n    /*audioList 정렬*/\r\n    onAudioListSort = (audioList) =>{\r\n        audioList.sort(function (a,b){\r\n            return a.order - b.order\r\n        })\r\n\r\n        return audioList\r\n    }\r\n\r\n    onFind = (arr, playListName) => {\r\n        /*\r\n\r\n            let index = arr.indexOf(playListName);\r\n            while (index != -1) {\r\n              searchResult.push(index);\r\n              index = arr.indexOf(playListName, index + 1);\r\n            }\r\n        */\r\n\r\n        let searchResult = [];\r\n        for(var i = 0; i < arr.length; i++){\r\n            if(arr[i].PL_ID === playListName){\r\n                searchResult.push(arr[i]);\r\n            }\r\n        }\r\n        return searchResult;\r\n    }\r\n\r\n    /*\r\n    * play list 목록에서 특정 play list 를 선택했을 때\r\n    */\r\n    onPlayListClick = (playlist) => {\r\n        console.log(playlist);\r\n        console.log(playlist.PL_ID);\r\n\r\n        /*    let new_array = [];\r\n            new_array = this.onFind(this.state.audioLists, playlist.PL_ID);\r\n\r\n            console.log(new_array);\r\n\r\n            this.updateAudioLists(new_array);*/\r\n\r\n        console.log(this.audioLists);\r\n        this.setState({\r\n            /*audioLists : new_array,*/\r\n            playListName : playlist.name,\r\n            playListMode : PLAY_LIST_MODE.music\r\n        });\r\n    }\r\n\r\n    /*\r\n    * music list 에서 play list 목록으로 돌아가기\r\n    */\r\n    onBackClick = () => {\r\n        this.setState({playListMode : PLAY_LIST_MODE.list});\r\n    }\r\n\r\n    onOpenPanel = () => {\r\n        const { toggleMode, spaceBar } = this.props\r\n        if (toggleMode) {\r\n            this.setState({ toggle: true })\r\n            this.props.onModeChange && this.props.onModeChange(MODE.FULL)\r\n            if (spaceBar && this.player.current) {\r\n                this.player.current.focus({ preventScroll: true })\r\n            }\r\n        }\r\n        this.onCoverClick(MODE.MINI)\r\n    }\r\n\r\n    onHidePanel = () => {\r\n        this.setState({ toggle: false, audioListsPanelVisible: false })\r\n        this.props.onModeChange && this.props.onModeChange(MODE.MINI)\r\n    }\r\n\r\n    onDestroyPlayer = () => {\r\n        if (this.props.onBeforeDestroy) {\r\n            const onBeforeDestroy = Promise.resolve(\r\n                this.props.onBeforeDestroy(\r\n                    this.state.playId,\r\n                    this.state.audioLists,\r\n                    this.getBaseAudioInfo(),\r\n                ),\r\n            )\r\n\r\n            if (onBeforeDestroy && onBeforeDestroy.then) {\r\n                onBeforeDestroy\r\n                    .then(() => {\r\n                        this._onDestroyPlayer()\r\n                    })\r\n                    // ignore unhandledrejection handler\r\n                    .catch(() => {})\r\n            }\r\n            return\r\n        }\r\n        this._onDestroyPlayer()\r\n    }\r\n\r\n    _onDestroyPlayer = () => {\r\n        this.unInstallPlayer()\r\n    }\r\n\r\n    _onDestroyed = () => {\r\n        this.setState({ isPlayDestroyed: true })\r\n        if (this.props.onDestroyed) {\r\n            this.props.onDestroyed(\r\n                this.state.playId,\r\n                this.state.audioLists,\r\n                this.getBaseAudioInfo(),\r\n            )\r\n        }\r\n    }\r\n\r\n    getCurrentPlayIndex = () => {\r\n        return this.state.audioLists.findIndex(\r\n            (audio) => audio[PLAYER_KEY] === this.state.playId,\r\n        )\r\n    }\r\n\r\n    resetAudioPlayStatus = () => {\r\n        return new Promise((res) => {\r\n            this.setState(\r\n                {\r\n                    currentTime: 0,\r\n                    loading: false,\r\n                    playing: false,\r\n                    canPlay: false,\r\n                    lyric: '',\r\n                    currentLyric: '',\r\n                    defaultLyric : '',\r\n                    loadedProgress: 0,\r\n                    playIndex: DEFAULT_PLAY_INDEX,\r\n                },\r\n                res,\r\n            )\r\n        })\r\n    }\r\n\r\n    // 返回给使用者的 音乐信息\r\n    getBaseAudioInfo() {\r\n        const {\r\n            cover,\r\n            name,\r\n            likeMode,\r\n            musicSrc,\r\n            soundValue,\r\n            lyric,\r\n            audioLists,\r\n            currentLyric,\r\n            defaultLyric,\r\n        } = this.state\r\n\r\n        const {\r\n            currentTime,\r\n            muted,\r\n            networkState,\r\n            readyState,\r\n            played,\r\n            paused,\r\n            ended,\r\n            startDate,\r\n        } = this.audio || {}\r\n\r\n        const currentPlayIndex = this.getCurrentPlayIndex()\r\n        const currentAudioListInfo = audioLists[currentPlayIndex] || {}\r\n\r\n        return {\r\n            ...currentAudioListInfo,\r\n            cover,\r\n            name,\r\n            likeMode,\r\n            musicSrc,\r\n            volume: soundValue,\r\n            currentTime,\r\n            duration: this.audioDuration,\r\n            muted,\r\n            networkState,\r\n            readyState,\r\n            played,\r\n            paused,\r\n            ended,\r\n            startDate,\r\n            lyric,\r\n            currentLyric,\r\n            defaultLyric,\r\n            playIndex: currentPlayIndex,\r\n        }\r\n    }\r\n\r\n    onTogglePlay = () => {\r\n        this.setState({ isAudioSeeking: false })\r\n\r\n\r\n\r\n\r\n        if (this.state.audioLists.length >= 1) {\r\n            const { fadeIn, fadeOut } = this.props.volumeFade || {}\r\n            const { currentVolumeFade, currentVolumeFadeInterval } = this.state\r\n            const isCurrentlyFading =\r\n                currentVolumeFade === VOLUME_FADE.IN ||\r\n                currentVolumeFade === VOLUME_FADE.OUT\r\n\r\n            /**\r\n             * Currently in middle of fading in/out, so need to cancel the current interval and do the opposite action.\r\n             * E.g. if currently fading out, then we need to cancel the fade-out and do a fade-in starting at current volume.\r\n             */\r\n            if (isCurrentlyFading) {\r\n                // Clear current fade-in/out\r\n                clearInterval(currentVolumeFadeInterval)\r\n                this.setState({\r\n                    currentVolumeFadeInterval: undefined,\r\n                    updateIntervalEndVolume: undefined,\r\n                })\r\n            }\r\n\r\n            // Currently playing track or in the middle of fading in\r\n            if (\r\n                (!isCurrentlyFading && this.state.playing) ||\r\n                currentVolumeFade === VOLUME_FADE.IN\r\n            ) {\r\n                this.setState({ currentVolumeFade: VOLUME_FADE.OUT })\r\n                // Fade in from current volume to 0\r\n                const {\r\n                    fadeInterval: fadeOutInterval,\r\n                    updateIntervalEndVolume,\r\n                } = adjustVolume(\r\n                    this.audio,\r\n                    this.audio.volume,\r\n                    0,\r\n                    {\r\n                        duration: fadeOut,\r\n                    },\r\n                    () => {\r\n                        this.audio.pause()\r\n                        this.setState({\r\n                            currentVolumeFade: VOLUME_FADE.NONE,\r\n                            currentVolumeFadeInterval: undefined,\r\n                            playing: false,\r\n                            updateIntervalEndVolume: undefined,\r\n                        })\r\n                        // Restore volume so slider does not reset to zero\r\n                        this.audio.volume = this.getListeningVolume(this.state.soundValue)\r\n                    },\r\n                )\r\n\r\n                this.setState({\r\n                    currentVolumeFadeInterval: fadeOutInterval,\r\n                    updateIntervalEndVolume,\r\n                })\r\n            } else {\r\n                this.setState({ currentVolumeFade: VOLUME_FADE.IN })\r\n                // Start volume may not be 0 if interrupting a fade-out\r\n                const startVolume = isCurrentlyFading ? this.audio.volume : 0\r\n                const endVolume = this.getListeningVolume(this.state.soundValue)\r\n                const {\r\n                    fadeInterval: fadeInInterval,\r\n                    updateIntervalEndVolume,\r\n                } = adjustVolume(\r\n                    this.audio,\r\n                    startVolume,\r\n                    endVolume,\r\n                    {\r\n                        duration: fadeIn,\r\n                    },\r\n                    () => {\r\n                        this.setState({\r\n                            currentVolumeFade: VOLUME_FADE.NONE,\r\n                            currentVolumeFadeInterval: undefined,\r\n                            updateIntervalEndVolume: undefined,\r\n                        })\r\n                        // It's possible that the volume level in the UI has changed since beginning of fade\r\n                        this.audio.volume = this.getListeningVolume(this.state.soundValue)\r\n                    },\r\n                )\r\n\r\n\r\n\r\n                this.setState(\r\n                    {\r\n                        currentVolumeFadeInterval: fadeInInterval,\r\n                        updateIntervalEndVolume,\r\n                        isAutoPlayWhenUserClicked: true,\r\n                    },\r\n                    () => {\r\n                        if (fadeInInterval) {\r\n                            this.audio.volume = startVolume\r\n                        }\r\n                        this.loadAndPlayAudio()\r\n                    },\r\n                )\r\n            }\r\n            this.wavesurfer.current.playPause();\r\n        }\r\n    }\r\n\r\n    playAudio = (isLoaded = false) => {\r\n        if (this.isAudioCanPlay || isLoaded) {\r\n            if (isLoaded) {\r\n                this.setAudioLoaded()\r\n            }\r\n            this.loadAndPlayAudio(isLoaded)\r\n        }\r\n    }\r\n\r\n    setAudioLoaded = () => {\r\n        this.setState({\r\n            loading: false,\r\n            playing: false,\r\n        })\r\n    }\r\n\r\n    onAudioPause = () => {\r\n        this.setState({ playing: false })\r\n        this.props.onAudioPause && this.props.onAudioPause(this.getBaseAudioInfo())\r\n        if (this.state.lyric && this.lyric) {\r\n            this.lyric.togglePlay()\r\n        }\r\n    }\r\n\r\n    onAudioPlay = () => {\r\n        // Audio currentTime changed will be trigger audio playing event\r\n        if (this.state.isAudioSeeking) {\r\n            return\r\n        }\r\n        this.setState({ playing: true, loading: false })\r\n        this.props.onAudioPlay && this.props.onAudioPlay(this.getBaseAudioInfo())\r\n        if (this.state.lyric && this.lyric) {\r\n            this.lyric.togglePlay()\r\n        }\r\n    }\r\n\r\n    onSetAudioLoadedProgress = () => {\r\n        const { buffered: timeRanges, duration } = this.audio\r\n        if (timeRanges.length && timeRanges.end) {\r\n            const loadedProgress =\r\n                (timeRanges.end(timeRanges.length - 1) / duration) * 100\r\n\r\n            this.setState({ loadedProgress })\r\n        }\r\n    }\r\n\r\n    loadAndPlayAudio = (isLoaded = false) => {\r\n        const { remember } = this.props\r\n        const { isInitRemember, musicSrc } = this.state\r\n        const { networkState, readyState } = this.audio\r\n\r\n        if (!musicSrc) {\r\n            return\r\n        }\r\n\r\n        if (\r\n            networkState === AUDIO_NETWORK_STATE.NETWORK_NO_SOURCE ||\r\n            networkState === AUDIO_NETWORK_STATE.NETWORK_EMPTY\r\n        ) {\r\n            return this.onAudioError({\r\n                reason: `\r\n          [loadAndPlayAudio]: Failed to load because no supported source was found.\r\n          current network status is ${networkState}.\r\n        `,\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            playing: false,\r\n            loading: true,\r\n            isAudioSeeking: false,\r\n            isResetCoverRotate: false,\r\n        })\r\n\r\n        if (isLoaded || readyState >= AUDIO_READY_STATE.HAVE_FUTURE_DATA) {\r\n            const { playing } = this.getLastPlayStatus()\r\n            const isLastPause = remember && !isInitRemember && !playing\r\n            const canPlay = remember ? !isLastPause : this.isAudioCanPlay\r\n            this.setState(\r\n                {\r\n                    playing: canPlay,\r\n                    loading: false,\r\n                },\r\n                () => {\r\n                    if (canPlay) {\r\n                        this.play()\r\n                    }\r\n                    this.setState({\r\n                        isInitAutoPlay: true,\r\n                        isInitRemember: true,\r\n                        isAutoPlayWhenUserClicked: false,\r\n                    })\r\n                },\r\n            )\r\n        } else {\r\n\r\n            this.audio.load()\r\n        }\r\n    }\r\n\r\n    onAudioError = (error) => {\r\n        const { playMode, audioLists, playId, musicSrc } = this.state\r\n        const { loadAudioErrorPlayNext } = this.props\r\n        const isSingleLoop = playMode === PLAY_MODE.singleLoop\r\n        const currentPlayMode = isSingleLoop ? PLAY_MODE.order : playMode\r\n\r\n        this.lyric && this.lyric.stop()\r\n\r\n        // 如果删除歌曲或其他原因导致列表为空时\r\n        // 这时候会触发 https://developer.mozilla.org/en-US/docs/Web/API/MediaError\r\n        if (musicSrc) {\r\n            // 如果当前音乐加载出错 尝试播放下一首\r\n            if (loadAudioErrorPlayNext && audioLists.length) {\r\n                const isLastAudio =\r\n                    (playMode === PLAY_MODE.order || playMode === PLAY_MODE.orderLoop) &&\r\n                    playId === audioLists[audioLists.length - 1][PLAYER_KEY]\r\n                if (!isLastAudio) {\r\n                    this.handlePlay(currentPlayMode, true)\r\n                }\r\n            }\r\n\r\n            this.props.onAudioError &&\r\n            this.props.onAudioError(\r\n                this.audio.error || (error && error.reason) || null,\r\n                playId,\r\n                audioLists,\r\n                this.getBaseAudioInfo(),\r\n            )\r\n        }\r\n    }\r\n\r\n    // isNext true 下一首  false\r\n    handlePlay = (playMode, isNext = true) => {\r\n        const { playId, audioLists } = this.state\r\n        const audioListsLen = audioLists.length\r\n        if (!audioListsLen) {\r\n            return\r\n        }\r\n        const currentPlayIndex = this.getCurrentPlayIndex()\r\n\r\n        switch (playMode) {\r\n            // 顺序播放\r\n            case PLAY_MODE.order:\r\n                // 拖拽排序后 或者 正常播放 到最后一首歌 就暂停\r\n                if (currentPlayIndex === audioListsLen - 1) {\r\n                    this.audio.pause()\r\n                    return\r\n                }\r\n\r\n                this.audioListsPlay(\r\n                    isNext\r\n                        ? audioLists[currentPlayIndex + 1][PLAYER_KEY]\r\n                        : audioLists[currentPlayIndex - 1][PLAYER_KEY],\r\n                )\r\n                break\r\n\r\n            // 列表循环\r\n            case PLAY_MODE.orderLoop:\r\n                if (isNext) {\r\n                    if (currentPlayIndex === audioListsLen - 1) {\r\n                        return this.audioListsPlay(audioLists[0][PLAYER_KEY])\r\n                    }\r\n                    this.audioListsPlay(audioLists[currentPlayIndex + 1][PLAYER_KEY])\r\n                } else {\r\n                    if (currentPlayIndex === 0) {\r\n                        return this.audioListsPlay(\r\n                            audioLists[audioListsLen - 1][PLAYER_KEY],\r\n                        )\r\n                    }\r\n                    this.audioListsPlay(audioLists[currentPlayIndex - 1][PLAYER_KEY])\r\n                }\r\n                break\r\n\r\n            // 单曲循环\r\n            case PLAY_MODE.singleLoop:\r\n                this.audio.currentTime = 0\r\n                this.audioListsPlay(playId, true)\r\n                break\r\n\r\n            // 随机播放\r\n            case PLAY_MODE.shufflePlay:\r\n            {\r\n                let randomIndex = createRandomNum(0, audioListsLen - 1)\r\n                if (randomIndex === this.getCurrentPlayIndex()) {\r\n                    randomIndex = this.getPlayIndex(randomIndex + 1)\r\n                }\r\n                const randomPlayId = (audioLists[randomIndex] || {})[PLAYER_KEY]\r\n                this.audioListsPlay(randomPlayId, true)\r\n            }\r\n                break\r\n            default:\r\n                break\r\n        }\r\n\r\n    }\r\n\r\n    onAudioEnd = () => {\r\n        this.props.onAudioEnded &&\r\n        this.props.onAudioEnded(\r\n            this.state.playId,\r\n            this.state.audioLists,\r\n            this.getBaseAudioInfo(),\r\n        )\r\n        this.handlePlay(this.state.playMode)\r\n    }\r\n\r\n    /**\r\n     * 上一首 下一首 通用方法\r\n     * 除随机播放之外 都以  点击了上一首或者下一首 则以列表循环的方式 顺序放下一首歌\r\n     * 参考常规播放器的逻辑\r\n     */\r\n    audioPrevAndNextBasePlayHandle = (isNext = true) => {\r\n        const { playMode } = this.state\r\n        let _playMode = ''\r\n        switch (playMode) {\r\n            case PLAY_MODE.shufflePlay:\r\n                _playMode = playMode\r\n                break\r\n            default:\r\n                _playMode = PLAY_MODE.orderLoop\r\n                break\r\n        }\r\n        this.handlePlay(_playMode, isNext)\r\n    }\r\n\r\n    onPlayPrevAudio = () => {\r\n        const { restartCurrentOnPrev } = this.props\r\n        if (restartCurrentOnPrev && this.audio.currentTime > 1) {\r\n            this.audio.currentTime = 0\r\n            return\r\n        }\r\n\r\n        this.audioPrevAndNextBasePlayHandle(false);\r\n\r\n        this.onWaveSeek();\r\n    }\r\n\r\n    onPlayNextAudio = () => {\r\n        this.audioPrevAndNextBasePlayHandle(true);\r\n\r\n        this.onWavePositionChange(0);\r\n    }\r\n\r\n    audioTimeUpdate = () => {\r\n        const { currentTime } = this.audio\r\n        this.setState({ currentTime })\r\n        if (this.props.remember) {\r\n            this.saveLastPlayStatus()\r\n        }\r\n        this.props.onAudioProgress &&\r\n        this.props.onAudioProgress(this.getBaseAudioInfo())\r\n    }\r\n\r\n    onAudioSoundChange = (value) => {\r\n        this.setAudioVolume(value)\r\n    }\r\n\r\n    onAudioVolumeChange = () => {\r\n        const { volume } = this.audio\r\n        const { currentVolumeFade, currentAudioVolume } = this.state\r\n        if (\r\n            currentVolumeFade !== VOLUME_FADE.NONE ||\r\n            currentAudioVolume === volume\r\n        ) {\r\n            return\r\n        }\r\n        const volumeBarValue = this.getVolumeBarValue(volume)\r\n        this.setState({\r\n            soundValue: volumeBarValue,\r\n        })\r\n        if (this.props.onAudioVolumeChange) {\r\n            const formattedVolume = parseFloat(volume.toFixed(4))\r\n            this.props.onAudioVolumeChange(formattedVolume)\r\n        }\r\n    }\r\n\r\n    onProgressChange = (currentTime) => {\r\n        if (this.audio) {\r\n            this.audio.currentTime = currentTime\r\n        }\r\n\r\n        this.setState({ currentTime, isAudioSeeking: true })\r\n    }\r\n\r\n    onAudioSeeked = (currentTime) => {\r\n        this.setState({ isAudioSeeking: true })\r\n        if (!this.state.audioLists.length) {\r\n            return\r\n        }\r\n        this.lyric && this.lyric.seek(currentTime * 1000)\r\n\r\n        if (!this.state.playing) {\r\n            this.lyric && this.lyric.stop()\r\n        }\r\n        if (this.audio) {\r\n            this.audio.currentTime = currentTime\r\n            this.onWavePositionChange(currentTime);\r\n        }\r\n\r\n        this.props.onAudioSeeked &&\r\n        this.props.onAudioSeeked(this.getBaseAudioInfo())\r\n\r\n        setTimeout(() => {\r\n            this.setState({ isAudioSeeking: false })\r\n        }, 500)\r\n    }\r\n\r\n    onAudioMute = () => {\r\n        this.setState(\r\n            {\r\n                soundValue: 0,\r\n                currentAudioVolume: this.audio.volume,\r\n            },\r\n            () => {\r\n                this.audio.volume = 0\r\n            },\r\n        )\r\n    }\r\n\r\n    onAudioAbort = (e) => {\r\n        const { audioLists, playId } = this.state\r\n        const audioInfo = this.getBaseAudioInfo()\r\n        const mergedAudioInfo = { ...e, ...audioInfo }\r\n        this.props.onAudioAbort &&\r\n        this.props.onAudioAbort(playId, audioLists, mergedAudioInfo)\r\n    }\r\n\r\n    toggleMode = (mode) => {\r\n        if (mode === MODE.FULL) {\r\n            this.setState({ toggle: true })\r\n        }\r\n    }\r\n\r\n    toggleTheme = (theme) => {\r\n        this.setState({ theme })\r\n    }\r\n\r\n    onAudioListsSortEnd = ({ oldIndex, newIndex }) => {\r\n        if (oldIndex === newIndex) {\r\n            return\r\n        }\r\n\r\n        const { playId, audioLists } = this.state\r\n        const _audioLists = [...audioLists]\r\n        const item = _audioLists.splice(oldIndex, 1)[0]\r\n        _audioLists.splice(newIndex, 0, item)\r\n\r\n        // 如果拖动正在播放的歌曲 播放Id 等于 拖动后的index\r\n        const _playId = oldIndex === playId ? newIndex : playId\r\n\r\n        this.setState({ audioLists: _audioLists, playId: _playId })\r\n\r\n        this.props.onAudioListsSortEnd &&\r\n        this.props.onAudioListsSortEnd(oldIndex, newIndex)\r\n\r\n        this.props.onAudioListsChange &&\r\n        this.props.onAudioListsChange(\r\n            _playId,\r\n            _audioLists,\r\n            this.getBaseAudioInfo(),\r\n        )\r\n\r\n        // TODO: remove\r\n        if (this.props.onAudioListsDragEnd) {\r\n            // eslint-disable-next-line no-console\r\n            console.warn(\r\n                '[Deprecated] onAudioListsDragEnd is deprecated. please use onAudioListsSortEnd(oldIndex, newIndex){}',\r\n            )\r\n            this.props.onAudioListsDragEnd(oldIndex, newIndex)\r\n        }\r\n    }\r\n\r\n    saveLastPlayStatus = () => {\r\n        const {\r\n            currentTime,\r\n            playId,\r\n            theme,\r\n            soundValue,\r\n            playMode,\r\n            name,\r\n            likeMode,\r\n            cover,\r\n            singer,\r\n            musicSrc,\r\n        } = this.state\r\n        const lastPlayStatus = JSON.stringify({\r\n            currentTime,\r\n            playId,\r\n            theme,\r\n            playMode,\r\n            soundValue,\r\n            name,\r\n            likeMode,\r\n            cover,\r\n            singer,\r\n            musicSrc,\r\n        })\r\n        localStorage.setItem('lastPlayStatus', lastPlayStatus)\r\n    }\r\n\r\n    //remeber 적용\r\n    getLastPlayStatus = () => {\r\n        const {\r\n            theme,\r\n            defaultPlayMode,\r\n            playMode,\r\n            defaultPlayIndex,\r\n            playIndex,\r\n        } = this.props\r\n\r\n        const status = {\r\n            currentTime: 0,\r\n            playMode: playMode || defaultPlayMode || PLAY_MODE.order,\r\n            name: '',\r\n            likeMode: '',\r\n            cover: '',\r\n            singer: '',\r\n            musicSrc: '',\r\n            lyric: '',\r\n            playId: this.getDefaultPlayId(),\r\n            theme,\r\n            playing: true,\r\n            playIndex: playIndex || defaultPlayIndex || 0,\r\n        }\r\n        try {\r\n            return JSON.parse(localStorage.getItem('lastPlayStatus')) || status\r\n        } catch (error) {\r\n            return status\r\n        }\r\n    }\r\n\r\n    checkCurrentPlayingAudioIsInUpdatedAudioLists = (nextProps = this.props) => {\r\n        const { playId, musicSrc } = this.state\r\n        if (!nextProps.quietUpdate || !Array.isArray(nextProps.audioLists)) {\r\n            return false\r\n        }\r\n        return (\r\n            playId &&\r\n            nextProps.audioLists.some(\r\n                (newAudioInfo) =>\r\n                    newAudioInfo[PLAYER_KEY] === playId ||\r\n                    newAudioInfo.musicSrc === musicSrc,\r\n            )\r\n        )\r\n    }\r\n\r\n    play = () => {\r\n        // https://developers.google.com/web/updates/2017/06/play-request-was-interrupted\r\n        const playPromise = this.audio.play()\r\n        if (playPromise && playPromise.then) {\r\n            playPromise\r\n                .then(() => {\r\n                    this.setState({ loading: false, playing: true })\r\n                })\r\n                .catch(() => {\r\n                    this.setState({ loading: false, playing: false })\r\n                })\r\n        }\r\n    }\r\n\r\n    mockAutoPlayForMobile = () => {\r\n        if (this.props.autoPlay && !this.state.playing) {\r\n            this.audio.load()\r\n            this.play()\r\n        }\r\n    }\r\n\r\n    bindMobileAutoPlayEvents = () => {\r\n        document.addEventListener(\r\n            'touchstart',\r\n            () => {\r\n                this.mockAutoPlayForMobile()\r\n            },\r\n            { once: true },\r\n        )\r\n        // 监听微信准备就绪事件\r\n        document.addEventListener('WeixinJSBridgeReady', () => {\r\n            this.mockAutoPlayForMobile()\r\n        })\r\n    }\r\n\r\n    bindSafariAutoPlayEvents = () => {\r\n        document.addEventListener(\r\n            'click',\r\n            () => {\r\n                this.mockAutoPlayForMobile()\r\n            },\r\n            { once: true },\r\n        )\r\n    }\r\n\r\n    unBindEvents = (...options) => {\r\n        this.bindEvents(...options)\r\n    }\r\n\r\n    /**\r\n     * 绑定 audio 标签 事件\r\n     */\r\n    bindEvents = (\r\n        target = this.audio,\r\n        eventsNames = {\r\n            waiting: this.loadAndPlayAudio,\r\n            canplay: this.onAudioCanPlay,\r\n            error: this.onAudioError,\r\n            ended: this.onAudioEnd,\r\n            pause: this.onAudioPause,\r\n            play: this.onAudioPlay,\r\n            timeupdate: this.audioTimeUpdate,\r\n            volumechange: this.onAudioVolumeChange,\r\n            abort: this.onAudioAbort,\r\n            progress: this.onSetAudioLoadedProgress,\r\n        },\r\n        bind = true,\r\n    ) => {\r\n        const { once } = this.props\r\n        for (const name in eventsNames) {\r\n            const _events = eventsNames[name]\r\n            if (target) {\r\n                bind\r\n                    ? target.addEventListener(name, _events, {\r\n                        once: !!(once && name === 'play'),\r\n                    })\r\n                    : target.removeEventListener(name, _events)\r\n            }\r\n        }\r\n    }\r\n\r\n    getPlayId = (audioLists = this.state.audioLists) => {\r\n        const playIndex = this.getPlayIndex(undefined, audioLists)\r\n        const playId =\r\n            this.state.playId ||\r\n            (audioLists[playIndex] && audioLists[playIndex][PLAYER_KEY])\r\n        return playId\r\n    }\r\n\r\n    _getPlayInfo = (audioLists = []) => {\r\n\r\n        const playId = this.getPlayId(audioLists)\r\n\r\n        const { name = '', cover = '', singer = '', musicSrc = '', lyric = '', likeMode = true} =\r\n        audioLists.find((audio) => audio[PLAYER_KEY] === playId) || {}\r\n\r\n        return {\r\n            name,\r\n            likeMode,\r\n            cover,\r\n            singer,\r\n            musicSrc,\r\n            lyric,\r\n            audioLists,\r\n            playId,\r\n        }\r\n    }\r\n\r\n    getPlayInfo = (audioLists = []) => {\r\n        const newAudioLists = audioLists.filter((audio) => !audio[PLAYER_KEY])\r\n        const lastAudioLists = audioLists.filter((audio) => audio[PLAYER_KEY])\r\n        const mergedAudioLists = [\r\n            ...lastAudioLists,\r\n            ...newAudioLists.map((info) => {\r\n                return {\r\n                    ...info,\r\n                    [PLAYER_KEY]: uuId(),\r\n                }\r\n            }),\r\n        ]\r\n        return this._getPlayInfo(mergedAudioLists)\r\n    }\r\n\r\n    // I change the name of getPlayInfo to getPlayInfoOfNewList because i didn't want to change the prior changes\r\n    // the only thing this function does is to add id to audiolist elements.\r\n    getPlayInfoOfNewList = (nextProps) => {\r\n        const { audioLists = [] } = nextProps\r\n        const _audioLists = audioLists.map((info) => {\r\n            const prevAudioBeforeUpdate =\r\n                (nextProps.quietUpdate &&\r\n                    this.state.audioLists.find(\r\n                        ({ musicSrc }) => musicSrc === info.musicSrc,\r\n                    )) ||\r\n                {}\r\n            return {\r\n                ...info,\r\n                [PLAYER_KEY]: prevAudioBeforeUpdate[PLAYER_KEY] || uuId(),\r\n            }\r\n        })\r\n\r\n        return this._getPlayInfo(_audioLists)\r\n    }\r\n\r\n    initPlayInfo = (audioLists, cb) => {\r\n        const info = this.getPlayInfo(audioLists)\r\n\r\n        switch (typeof info.musicSrc) {\r\n            case 'function':\r\n                info.musicSrc().then((originMusicSrc) => {\r\n                    this.setState({ ...info, musicSrc: originMusicSrc }, cb)\r\n                }, this.onAudioError)\r\n                break\r\n            default:\r\n                this.setState(info, cb)\r\n        }\r\n    }\r\n\r\n    addMatchMediaListener = (query, handler) => {\r\n        const media = window.matchMedia(query)\r\n        handler(media)\r\n        if ('addEventListener' in media) {\r\n            media.addEventListener('change', handler)\r\n        } else {\r\n            media.addListener(handler)\r\n        }\r\n        return media\r\n    }\r\n\r\n    removeMatchMediaListener = (media, handler) => {\r\n        if (media) {\r\n            if ('removeEventListener' in media) {\r\n                media.removeEventListener('change', handler)\r\n            } else {\r\n                media.removeListener && media.removeListener(handler)\r\n            }\r\n        }\r\n    }\r\n\r\n    addMobileListener = () => {\r\n        this.mobileMedia = this.addMatchMediaListener(\r\n            this.props.mobileMediaQuery,\r\n            this.mobileMediaHandler,\r\n        )\r\n    }\r\n\r\n    removeMobileListener = () => {\r\n        this.removeMatchMediaListener(this.mobileMedia, this.mobileMediaHandler)\r\n    }\r\n\r\n    addSystemThemeListener = () => {\r\n        this.systemThemeMedia = this.addMatchMediaListener(\r\n            MEDIA_QUERY.DARK_THEME,\r\n            this.systemThemeMediaHandler,\r\n        )\r\n    }\r\n\r\n    removeSystemThemeListener = () => {\r\n        this.removeMatchMediaListener(\r\n            this.systemThemeMedia,\r\n            this.systemThemeMediaHandler,\r\n        )\r\n    }\r\n\r\n    mobileMediaHandler = ({ matches }) => {\r\n        this.setState({\r\n            isMobile: !!matches,\r\n        })\r\n    }\r\n\r\n    systemThemeMediaHandler = ({ matches }) => {\r\n        if (this.props.theme === THEME.AUTO) {\r\n            const theme = matches ? THEME.DARK : THEME.LIGHT\r\n            this.updateTheme(theme)\r\n        }\r\n    }\r\n\r\n    setDefaultAudioVolume = () => {\r\n        const { defaultVolume, remember } = this.props\r\n        // 音量 [0-1]\r\n        this.defaultVolume = Math.max(0, Math.min(defaultVolume, 1))\r\n        const { soundValue = this.defaultVolume } = this.getLastPlayStatus()\r\n        this.setAudioVolume(remember ? soundValue : this.defaultVolume)\r\n    }\r\n\r\n    getDefaultPlayId = (audioLists = this.props.audioLists) => {\r\n        const playIndex = this.getPlayIndex()\r\n        return audioLists[playIndex] && audioLists[playIndex][PLAYER_KEY]\r\n    }\r\n\r\n    initLyricParser = () => {\r\n        this.lyric = new Lyric(this.state.lyric, this.onLyricChange)\r\n        this.setState({\r\n            currentLyric: this.lyric.lines[0] && this.lyric.lines[0].txt,\r\n            defaultLyric : this.lyric.lrc,\r\n        })\r\n    }\r\n\r\n    onLyricChange = ({ lineNum, txt }) => {\r\n\r\n        this.setState({\r\n            currentLyric: txt,\r\n        })\r\n        this.props.onAudioLyricChange && this.props.onAudioLyricChange(lineNum, txt)\r\n    }\r\n\r\n    /*\r\n    * 가사 수정 창에서 가사 변경\r\n    */\r\n    onChangeEditLyrics = (e) => {\r\n        const newLyric = e.target.value;\r\n\r\n        this.lyric.lrc = newLyric;\r\n        this.lyric._init();\r\n        if(newLyric === ''){\r\n            this.setState({\r\n                lyric : newLyric,\r\n                defaultLyric:newLyric,\r\n                currentLyric:newLyric\r\n            });\r\n        }else\r\n        {\r\n            this.setState({\r\n                lyric : newLyric,\r\n                defaultLyric:newLyric\r\n            });\r\n        }\r\n        this.lyric && this.lyric.seek(this.state.currentTime * 1000);\r\n\r\n    }\r\n\r\n    /*\r\n    * Waveform 위치 자동 변경 onChange\r\n    * (음악 재생 위치 변경시 호출)\r\n    */\r\n    onWavePositionChange(seconds){\r\n        if (seconds >= this.wavesurfer.current.getDuration()) {\r\n            this.wavesurfer.current.seekTo(1);\r\n        } else {\r\n            this.wavesurfer.current.seekTo(seconds / this.wavesurfer.current.getDuration());\r\n        }\r\n    }\r\n\r\n    /*\r\n * Waveform 위치 수동 변경 onChange\r\n */\r\n    onWaveSeek = () => {\r\n\r\n        this.onProgressChange(this.wavesurfer.current.getCurrentTime());\r\n\r\n        this.setState({ isAudioSeeking: true })\r\n        if (!this.state.audioLists.length) {\r\n            return\r\n        }\r\n        this.lyric && this.lyric.seek(this.wavesurfer.current.getCurrentTime() * 1000)\r\n\r\n        if (!this.state.playing) {\r\n            this.lyric && this.lyric.stop()\r\n        }\r\n        if (this.audio) {\r\n            this.audio.currentTime = this.wavesurfer.current.getCurrentTime();\r\n            //this.onWavePositionChange(this.wavesurfer.current.getCurrentTime());\r\n        }\r\n\r\n        this.props.onAudioSeeked &&\r\n        this.props.onAudioSeeked(this.getBaseAudioInfo())\r\n\r\n        setTimeout(() => {\r\n            this.setState({ isAudioSeeking: false })\r\n        }, 500)\r\n    }\r\n\r\n\r\n\r\n    updateTheme = (theme) => {\r\n        if (\r\n            theme &&\r\n            theme !== this.props.theme &&\r\n            Object.values(THEME).includes(theme)\r\n        ) {\r\n            this.setState({ theme })\r\n        }\r\n    }\r\n\r\n    updateMode = (mode) => {\r\n        if (\r\n            mode &&\r\n            mode !== this.props.mode &&\r\n            Object.values(MODE).includes(mode)\r\n        ) {\r\n            this.setState({ toggle: mode === MODE.FULL })\r\n            if (mode === MODE.MINI) {\r\n                this._closeAudioListsPanel()\r\n            }\r\n        }\r\n    }\r\n\r\n    updatePlayMode = (playMode) => {\r\n        if (!Object.values(PLAY_MODE).includes(playMode)) {\r\n            return\r\n        }\r\n        if (playMode !== this.props.playMode) {\r\n            this.setState({ playMode })\r\n        }\r\n    }\r\n\r\n    updateAudioLists = (audioLists) => {\r\n        const newAudioLists = [\r\n            ...this.state.audioLists,\r\n            ...audioLists.filter(\r\n                (audio) =>\r\n                    this.state.audioLists.findIndex(\r\n                        (v) => v.musicSrc === audio.musicSrc,\r\n                    ) === -1,\r\n            ),\r\n        ]\r\n        this.initPlayInfo(newAudioLists)\r\n        this.bindEvents(this.audio)\r\n        this.props.onAudioListsChange &&\r\n        this.props.onAudioListsChange(\r\n            this.state.playId,\r\n            audioLists,\r\n            this.getBaseAudioInfo(),\r\n        )\r\n    }\r\n\r\n    loadNewAudioLists = (nextProps) => {\r\n        const {\r\n            audioLists,\r\n            remember,\r\n            playMode,\r\n            theme,\r\n            autoPlayInitLoadPlayList,\r\n            playIndex,\r\n        } = nextProps\r\n        if (!Array.isArray(audioLists) || !audioLists.length) {\r\n            return\r\n        }\r\n        const info = this.getPlayInfoOfNewList(nextProps)\r\n        const lastPlayStatus = remember\r\n            ? this.getLastPlayStatus()\r\n            : {\r\n                playMode: playMode || PLAY_MODE.order,\r\n                playIndex: playIndex || DEFAULT_PLAY_INDEX,\r\n            }\r\n\r\n        if (theme !== THEME.AUTO) {\r\n            lastPlayStatus.theme = theme\r\n        }\r\n\r\n        const audioInfo = {\r\n            ...info,\r\n            ...lastPlayStatus,\r\n            isInitAutoPlay: autoPlayInitLoadPlayList,\r\n            playing: this.isAudioCanPlay,\r\n        }\r\n\r\n        if (this.checkCurrentPlayingAudioIsInUpdatedAudioLists(nextProps)) {\r\n            this.setState({ audioLists: info.audioLists })\r\n            return\r\n        }\r\n\r\n        switch (typeof info.musicSrc) {\r\n            case 'function':\r\n                info.musicSrc().then((musicSrc) => {\r\n                    this.setState({\r\n                        ...audioInfo,\r\n                        musicSrc,\r\n                    })\r\n                }, this.onAudioError)\r\n                break\r\n            default:\r\n                this.setState(audioInfo)\r\n        }\r\n    }\r\n\r\n    resetPlayId = () => {\r\n        return new Promise((res) => {\r\n            this.setState({ playId: this.initPlayId }, res)\r\n        })\r\n    }\r\n\r\n    changeAudioLists = (nextProps) => {\r\n        if (!this.checkCurrentPlayingAudioIsInUpdatedAudioLists(nextProps)) {\r\n            this.resetAudioStatus()\r\n        }\r\n        this.resetPlayId().then(() => {\r\n            this.loadNewAudioLists(nextProps)\r\n            this.props.onAudioListsChange &&\r\n            this.props.onAudioListsChange(\r\n                this.state.playId,\r\n                nextProps.audioLists,\r\n                this.getBaseAudioInfo(),\r\n            )\r\n        })\r\n    }\r\n\r\n    updatePlayIndex = (playIndex) => {\r\n        const currentPlayIndex = this.getCurrentPlayIndex()\r\n        if (playIndex !== undefined && currentPlayIndex !== playIndex) {\r\n            this.resetAudioPlayStatus().then(() => {\r\n                const currentPlayAudio = this.state.audioLists[\r\n                    this.getPlayIndex(playIndex)\r\n                    ]\r\n                if (currentPlayAudio && currentPlayAudio[PLAYER_KEY]) {\r\n                    this.audioListsPlay(currentPlayAudio[PLAYER_KEY], true)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    playByIndex = (index) => {\r\n        this.updatePlayIndex(index)\r\n    }\r\n\r\n    getEnhanceAudio = () => {\r\n        const { audio } = this\r\n        ;[\r\n            {\r\n                name: 'destroy',\r\n                value: this.onDestroyPlayer,\r\n            },\r\n            {\r\n                name: 'updatePlayIndex',\r\n                value: this.updatePlayIndex,\r\n            },\r\n            {\r\n                name: 'playByIndex',\r\n                value: this.playByIndex,\r\n            },\r\n            {\r\n                name: 'playNext',\r\n                value: this.onPlayNextAudio,\r\n            },\r\n            {\r\n                name: 'playPrev',\r\n                value: this.onPlayPrevAudio,\r\n            },\r\n            {\r\n                name: 'togglePlay',\r\n                value: this.onTogglePlay,\r\n            },\r\n            {\r\n                name: 'clear',\r\n                value: this.clearAudioLists,\r\n            },\r\n            {\r\n                name: 'sortable',\r\n                value: this.sortable,\r\n            },\r\n        ].forEach(({ name, value }) => {\r\n            Object.defineProperty(audio, name, {\r\n                value,\r\n                writable: false,\r\n            })\r\n        })\r\n        return audio\r\n    }\r\n\r\n    onGetAudioInstance = () => {\r\n        if (this.props.getAudioInstance) {\r\n            this.props.getAudioInstance(this.getEnhanceAudio())\r\n        }\r\n    }\r\n\r\n    updateMediaSessionMetadata = () => {\r\n        if ('mediaSession' in navigator && this.props.showMediaSession) {\r\n            const { name, cover, singer } = this.state\r\n            const mediaMetaDataConfig = {\r\n                title: name,\r\n                artist: singer,\r\n                album: name,\r\n            }\r\n            if (cover) {\r\n                mediaMetaDataConfig.artwork = [\r\n                    '96x96',\r\n                    '128x128',\r\n                    '192x192',\r\n                    '256x256',\r\n                    '384x384',\r\n                    '512x512',\r\n                ].map((size) => ({\r\n                    src: cover,\r\n                    sizes: size,\r\n                    type: 'image/png',\r\n                }))\r\n            }\r\n            //navigator.mediaSession.metadata = new MediaMetadata(mediaMetaDataConfig)\r\n            this.updateMediaSessionPositionState()\r\n        }\r\n    }\r\n\r\n    updateMediaSessionPositionState = () => {\r\n        if ('setPositionState' in navigator.mediaSession) {\r\n            try {\r\n                const { audio } = this\r\n                navigator.mediaSession.setPositionState({\r\n                    duration: this.audioDuration,\r\n                    playbackRate: audio.playbackRate || 1,\r\n                    position: audio.currentTime || 0,\r\n                })\r\n            } catch (error) {\r\n                // eslint-disable-next-line no-console\r\n                console.error('Update media session position state failed: ', error)\r\n            }\r\n        }\r\n    }\r\n\r\n    onAddMediaSession = () => {\r\n        if ('mediaSession' in navigator && this.props.showMediaSession) {\r\n            const defaultSkipTime = 10\r\n            navigator.mediaSession.setActionHandler('play', this.onTogglePlay)\r\n            navigator.mediaSession.setActionHandler('pause', this.onTogglePlay)\r\n            navigator.mediaSession.setActionHandler('seekbackward', (details) => {\r\n                const skipTime = details.seekOffset || defaultSkipTime\r\n                this.audio.currentTime = Math.max(this.audio.currentTime - skipTime, 0)\r\n                this.props.onAudioSeeked &&\r\n                this.props.onAudioSeeked(this.getBaseAudioInfo())\r\n            })\r\n            navigator.mediaSession.setActionHandler('seekforward', (details) => {\r\n                const skipTime = details.seekOffset || defaultSkipTime\r\n                this.audio.currentTime = Math.min(\r\n                    this.audio.currentTime + skipTime,\r\n                    this.audioDuration,\r\n                )\r\n                this.props.onAudioSeeked &&\r\n                this.props.onAudioSeeked(this.getBaseAudioInfo())\r\n            })\r\n            navigator.mediaSession.setActionHandler(\r\n                'previoustrack',\r\n                this.onPlayPrevAudio,\r\n            )\r\n            navigator.mediaSession.setActionHandler('nexttrack', this.onPlayNextAudio)\r\n\r\n            setTimeout(() => {\r\n                this.updateMediaSessionMetadata()\r\n            }, 0)\r\n\r\n            try {\r\n                navigator.mediaSession.setActionHandler('seekto', (event) => {\r\n                    if (event.fastSeek && 'fastSeek' in this.audio) {\r\n                        this.audio.fastSeek(event.seekTime)\r\n                        return\r\n                    }\r\n                    this.audio.currentTime = event.seekTime\r\n                    this.updateMediaSessionPositionState()\r\n                })\r\n            } catch (error) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    'Warning! The \"seekto\" media session action is not supported.',\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    bindUnhandledRejection = () => {\r\n        window.addEventListener('unhandledrejection', this.onAudioError)\r\n    }\r\n\r\n    unBindUnhandledRejection = () => {\r\n        window.removeEventListener('unhandledrejection', this.onAudioError)\r\n    }\r\n\r\n    bindKeyDownEvents = () => {\r\n        if (this.props.spaceBar && this.player.current) {\r\n            this.player.current.addEventListener('keydown', this.onKeyDown, false)\r\n            this.player.current.focus({ preventScroll: true })\r\n        }\r\n    }\r\n\r\n    unBindKeyDownEvents = () => {\r\n        if (this.player.current) {\r\n            this.player.current.removeEventListener('keydown', this.onKeyDown, false)\r\n        }\r\n    }\r\n\r\n    onKeyDown = (e) => {\r\n        const { spaceBar } = this.props\r\n        if (spaceBar && e.keyCode === SPACE_BAR_KEYCODE) {\r\n            this.onTogglePlay()\r\n        }\r\n    }\r\n\r\n    initPlayer = (\r\n        audioLists = this.props.audioLists,\r\n        isBindKeyDownEvents = true,\r\n        resetAudioVolume = true,\r\n    ) => {\r\n        if (!Array.isArray(audioLists) || !audioLists.length) {\r\n            return\r\n        }\r\n        if (resetAudioVolume) {\r\n            this.setDefaultAudioVolume()\r\n        }\r\n        this.bindUnhandledRejection()\r\n        this.bindEvents(this.audio)\r\n        this.initLyricParser()\r\n        this.onAddMediaSession()\r\n        if (IS_MOBILE) {\r\n            this.bindMobileAutoPlayEvents()\r\n        } else {\r\n            if (isBindKeyDownEvents) {\r\n                this.bindKeyDownEvents()\r\n            }\r\n            if (isSafari()) {\r\n                this.bindSafariAutoPlayEvents()\r\n            }\r\n        }\r\n    }\r\n\r\n    removeLyric = () => {\r\n        if (this.lyric) {\r\n            this.lyric.stop()\r\n            this.lyric = undefined\r\n        }\r\n    }\r\n\r\n    unInstallPlayer = () => {\r\n        this.unBindEvents(this.audio, undefined, false)\r\n        this.unBindUnhandledRejection()\r\n        this.unBindKeyDownEvents()\r\n        this.removeMobileListener()\r\n        this.removeLyric()\r\n        this._onDestroyed()\r\n        this.sortable && this.sortable.destroy()\r\n    }\r\n\r\n    onAudioCanPlay = () => {\r\n        if (this.state.isAudioSeeking) {\r\n            return\r\n        }\r\n        this.setState({ canPlay: true }, () => {\r\n            this.playAudio(true)\r\n        })\r\n    }\r\n\r\n    initSortableAudioLists = () => {\r\n        const { audioLists, sortableOptions } = this.props\r\n        const { selector, ...defaultOptions } = SORTABLE_CONFIG\r\n        const container = document.querySelector(`.${selector}`)\r\n        if ((Array.isArray(audioLists) && !audioLists.length) || !container) {\r\n            return\r\n        }\r\n\r\n        if (this.sortable) {\r\n            this.sortable.destroy()\r\n        }\r\n        this.sortable = new Sortable(container, {\r\n            onEnd: this.onAudioListsSortEnd,\r\n            ...defaultOptions,\r\n            ...sortableOptions,\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(_, prevState) {\r\n        if (prevState.musicSrc !== this.state.musicSrc) {\r\n            // eslint-disable-next-line react/no-did-update-set-state\r\n            this.setState({ isResetCoverRotate: true })\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line camelcase\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        const {\r\n            audioLists,\r\n            playIndex,\r\n            theme,\r\n            mode,\r\n            playMode,\r\n            clearPriorAudioLists,\r\n        } = nextProps\r\n        const isEqualAudioLists = arrayEqual(audioLists)(this.props.audioLists)\r\n        if (!isEqualAudioLists) {\r\n            if (clearPriorAudioLists) {\r\n                this.changeAudioLists(nextProps)\r\n            } else {\r\n                this.updateAudioLists(audioLists)\r\n            }\r\n            if (!this.checkCurrentPlayingAudioIsInUpdatedAudioLists(nextProps)) {\r\n                this.initPlayer(audioLists, false, false)\r\n            }\r\n            setTimeout(() => this.initSortableAudioLists(), 200)\r\n        }\r\n        this.updatePlayIndex(\r\n            !isEqualAudioLists && clearPriorAudioLists\r\n                ? DEFAULT_PLAY_INDEX\r\n                : playIndex,\r\n        )\r\n        this.updateTheme(theme)\r\n        this.updateMode(mode)\r\n        this.updatePlayMode(playMode)\r\n    }\r\n\r\n    // eslint-disable-next-line camelcase\r\n    // load 후 state 적용\r\n    UNSAFE_componentWillMount() {\r\n        console.log(\"UNSAFE_componentWillMount\");\r\n        const { audioLists, remember, myPlayLists, playListMode } = this.props\r\n\r\n        if (Array.isArray(myPlayLists) && myPlayLists.length >= 1) {\r\n            myPlayLists.forEach(function (element){\r\n                element.isRename = false;\r\n            });\r\n        }\r\n\r\n        if (Array.isArray(audioLists) && audioLists.length >= 1) {\r\n            const playInfo = this.getPlayInfo(audioLists)\r\n\r\n            const lastPlayStatus = remember ? this.getLastPlayStatus() : {}\r\n\r\n            switch (typeof playInfo.musicSrc) {\r\n                case 'function':\r\n                    playInfo.musicSrc().then((val) => {\r\n                        this.setState({\r\n                            ...playInfo,\r\n                            myPlayLists,\r\n                            playListMode,\r\n                            musicSrc: val,\r\n                            ...lastPlayStatus,\r\n                        })\r\n                    }, this.onAudioError)\r\n                    break\r\n                default:\r\n                    this.setState({\r\n                        ...playInfo,\r\n                        myPlayLists,\r\n                        playListMode,\r\n                        ...lastPlayStatus,\r\n                    })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unInstallPlayer()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.addMobileListener()\r\n        this.addSystemThemeListener()\r\n        this.initPlayer()\r\n        this.initSortableAudioLists()\r\n        this.onGetAudioInstance()\r\n    }\r\n}\r\n","export const AUDIO_LIST_REMOVE_ANIMATE_TIME = 350 // 列表删除动画时间(ms)\r\n","export const SPACE_BAR_KEYCODE = 32\r\n","export default __webpack_public_path__ + \"static/media/index.fdc4972b.less\";","export default __webpack_public_path__ + \"static/media/example.d824fb7f.less\";","/* eslint-disable no-console */\nimport React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport ReactJkMusicPlayer from './ReactJKMusicPlayer'\nimport Locale from '../src/config/locale';\nimport './styles/index.less';\nimport './example.less';\nimport './App.css';\nimport './index.css';\n\nconst lyric = [\n  '[00:00.00]by RentAnAdviser.com',\n  '[00:28.10]aay',\n  '[00:30.21]Fonsi',\n  '[00:31.65]DY',\n  '[00:33.23]Ohh OH NO OH Noo',\n  '[00:37.21]EYY EYY eh',\n  '[00:41.44]Si... Sabes que ya llevo un rato mirándote',\n  '[00:46.78]Tengo que bailar contigo hoy',\n  '[00:51.24]DY',\n  '[00:52.47]Vi Que tu mirada ya estaba llamándome',\n  '[00:57.47]Muestrame el camino que yo voy',\n  '[01:02.15]OHH',\n  '[01:03.40]Tu... Tú eres el imán y yo soy el metal',\n  '[01:06.27]Me voy acercando y voy armando el plan',\n  '[01:09.06]**** con pensarlo se acelera el pulso',\n  '[01:12.74]Ohh yeah',\n  '[01:13.78]Ya',\n  '[01:15.15]Ya me estás gustando más de lo normal',\n  '[01:17.11]Todos mis sentidos van pidiendo más',\n  '[01:19.58]Esto hay que *****lo sin ningún apuro',\n  '[01:23.17]Despacito',\n  '[01:25.75]Quiero respirar tu cuello despacito',\n  '[01:28.27]Deja que te diga cosas al oído',\n  '[01:31.07]Para que te acuerdes si no estás conmigo',\n  '[01:34.33]Despacito',\n  '[01:36.48]Quiero *******rte a besos despacito',\n  '[01:39.07]Firmar las paredes de tu laberinto',\n  '[01:41.63]Y hacer de tu cuerpo todo un m****crito',\n  '[01:44.38]Sube sube sube sube sube',\n  '[01:46.55]Quiero ver bailar tu pelo Quiero ser tu ritmo',\n  '[01:50.27]Que le enseñes a mi boca',\n  '[01:53.15]Tus lugares favoritos',\n  '[01:55.64]Favorito favorito ey eeh',\n  '[01:57.34]Déjame sobrepasar',\n  '[01:58.78]Tu zonas de peligro',\n  '[02:01.11]Hasta ******** tus *****s',\n  '[02:03.70]Y que olvides tu apellido',\n  '[02:06.38]Si te pido un beso ven damelo',\n  '[02:08.64]Yo se que estas pensandolo',\n  '[02:10.07]LLevo tiempo intentandolo',\n  '[02:11.34]Mami esto es dando y dandolo',\n  '[02:12.67]Sabes que tu corazon conmigo te hace bam bam',\n  '[02:15.44]Sabes que esa beba esta buscando de mi bambam',\n  '[02:18.17]Ven prueba de mi boca para ver como te sabe',\n  '[02:20.78]Quiero quiero quiero ver cuanto amor a ti te cabe',\n  '[02:23.48]Yo no tengo prisa yo me quiero dar el viaje',\n  '[02:26.27]Empezamos lento despues salvaje',\n  '[02:29.01]Pasito a pasito suave suavecito',\n  '[02:31.51]Nos vamos pegando poquito a poquito',\n  '[02:34.25]Cuando tu me besas con esa destreza',\n  '[02:37.04]Creo tu eres malicia con delicadeza',\n  '[02:39.73]Pasito a pasito suave suavecito',\n  '[02:42.31]Nos vamos pegando poquito a poquito',\n  '[02:45.14]Y es que esa belleza es un rompe cabeza',\n  '[02:47.61]Pero pa ******** aqui tengo la pieza',\n  '[02:51.42]Despacito',\n  '[02:53.25]Quiero recorrerte a besos despacito',\n  '[02:55.67]Deja que te diga cosas al oído',\n  '[02:58.48]Para que te acuerdes si no estás conmigo',\n  '[03:02.00]Despecito',\n  '[03:03.77]Quiero recorrerte a besos despacito',\n  '[03:06.44]Dime las paredes de tu laberinto',\n  '[03:09.17]Y hacer de tu cuerpo todo un m****crito',\n  '[03:12.22]sube sube sube sube sube',\n  '[03:14.17]Quiero ver bailar tu pelo quiero ser tu ritmo',\n  '[03:17.68]Que le enseñes a mi boca tus lugares favoritos',\n  '[03:23.17]favorito favorito',\n  '[03:24.75]Déjame sobrepasar tu zonas de peligro',\n  '[03:29.01]Hasta ******** tus *****s y que olvides tu apellido',\n  '[03:34.24]Despacito',\n  '[03:36.26]Vamos a hcerlo en una playa en Puerto Rico',\n  '[03:38.58]Hasta que las olas griten Ay Bendito',\n  '[03:41.51]Para que mi sello se quede contigo BAILALO',\n  '[03:45.77]Pasito a pasito suave suavecito',\n  '[03:48.34]Nos vamos pegando poquito a poquito',\n  '[03:51.07]Que le enseñes a mi boca tus lugares favoritos',\n  '[03:57.00]Pasito a pasito suave suavecito',\n  '[03:59.17]Nos vamos pegando poquito a poquito',\n  '[04:01.64]Hasta ******** tus *****s y que olvides tu apellido',\n  '[04:06.50]DES...PA...CI...TO',\n  '[04:12.24]Pasito a pasito',\n  '[04:13.38]Suave suavecito',\n  '[04:14.61]Nos vamos pegando',\n  '[04:16.25]Poquito a poquito',\n  '[04:23.10]Pasito a pasito',\n  '[04:24.30]Suave suavecito',\n  '[04:25.57]Nos vamos pegando',\n  '[04:27.05]Poquito a poquito',\n  '[04:34.68]by RentAnAdviser.com',\n].join('\\n');\n\n//1. 음악목록\nconst audioList1 = [\n  /*\n  * PL_ID : play list ID\n  * AD_ID : 노래 ID\n  * name : 노래이름\n  * singer : 가수이름\n  * cover: 표출될 앨범 사진\n  * musicSrc : 음악 경로\n  * likeMode : 좋아요 표시(true : like / falas : dislike)\n  * order : 음악 리스트에 표출될 음악 순서\n  * orderInFolder : 음악 리스트에서 폴더 안에서 표출될 순서\n  * */\n\n  // {\n  //   PL_ID : 'PL_1',\n  //   AD_ID : 'AD_2',\n  //   name: 'Dorost Nemisham1',\n  //   singer: 'Sirvan Khosravi',\n  //   cover: 'https://res.cloudinary.com/ehsanahmadi/image/upload/v1573758778/Sirvan-Khosravi-Dorost-Nemisham_glicks.jpg',\n  //   musicSrc: 'https://www.mfiles.co.uk/mp3-downloads/brahms-st-anthony-chorale-theme-two-pianos.mp3',\n  //   likeMode : false,\n  //   order : 2,\n  //   lyric : '',\n  // },\n  {\n    PL_ID : 'PL_1',\n    AD_ID : 'AD_1',\n    name: 'Despacito',\n    singer: 'Luis Fonsi',\n    cover: 'https://ifh.cc/g/QVGATp.png',\n    musicSrc: 'https://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3',\n    likeMode : true,\n    order : 1,\n    lyric : lyric,\n  },\n\n]\n\nconst playLists1 = [\n  /*\n  * PL_ID : play list ID\n  * name : play list name\n  * order : play list order\n  * musicCnt : music count in play list\n  * */\n\n  {\n    PL_ID : 'PL_1',\n    name: 'play list 1',\n    order : 1,\n    musicCnt : 1,\n  },\n  {\n    PL_ID : 'PL_2',\n    name: 'play list 2',\n    order : 2,\n    musicCnt : 0,\n  },\n\n]\n\n//2. ReactJkMusicPlayer 기본 옵션\nconst options = {\n\n  myPlayLists : playLists1,\n  // international [type `en_US | zh_CN | Object` default `en_US`]\n  locale: Locale.en_US,\n\n  // default play index of the audio player  [type `number` default `0`]\n  defaultPlayIndex: 0,\n\n  // if you want dynamic change current play audio you can change it [type `number` default `0`]\n  // playIndex: 0,\n\n  // color of the music player theme    [ type: 'light' | 'dark' | 'auto'  default `dark` ]\n  theme: 'light',\n\n  // audio controller is can be drag of the \"mini\" mode     [type `Boolean` default `true`]\n  drag: true,\n\n  // Specifies movement boundaries. Accepted values:\n  // - `parent` restricts movement within the node's offsetParent\n  //    (nearest node with position relative or absolute), or\n  // - a selector, restricts movement within the targeted node\n  // - An object with `left, top, right, and bottom` properties.\n  //   These indicate how far in each direction the draggable\n  //   can be moved.\n  // Ref: https://github.com/STRML/react-draggable#draggable-api\n  bounds: 'body',\n\n  // drag the audio progress bar [type `Boolean` default `true`]\n  seeked: true,\n\n  // audio cover is show of the \"mini\" mode [type `Boolean` default 'true']\n  showMiniModeCover: true,\n\n  // audio playing progress is show of the \"mini\"  mode\n  showMiniProcessBar: false,\n\n  // Display chrome media session.  [type `Boolean` default `false`]\n  showMediaSession: false,\n\n  // Displays the audio load progress bar.  [type `Boolean` default `true`]\n  showProgressLoadBar: true,\n\n  // play button display of the audio player panel   [type `Boolean` default `true`]\n  showPlay: true,\n\n  // reload button display of the audio player panel   [type `Boolean` default `true`]\n  showReload: true,\n\n  // download button display of the audio player panel   [type `Boolean` default `true`]\n  showDownload: false,\n\n  // loop button display of the audio player panel   [type `Boolean` default `true`]\n  showPlayMode: true,\n\n  // theme toggle switch  display of the audio player panel   [type `Boolean` default `true`]\n  showThemeSwitch: false,\n\n  // lyric display of the audio player panel   [type `Boolean` default `false`]\n  showLyric: true,\n\n  // destroy player button display  [type `Boolean` default `false`]\n  showDestroy: true,\n\n  /**\n   * Don't interrupt current playing state when audio list updated\n   * audioLists eg. (A) is current playing...\n   * [A,B] => [A,C,B]\n   * [A,B] => [A,B,C]\n   *\n   * if (A) not in updated audio lists\n   * [A,B] => [C]\n   * (C) is playing\n   */\n  // [type `boolean`, default `false`]\n  quietUpdate: false,\n\n  // Replace a new playlist with the first loaded playlist\n  // instead of adding it at the end of it.\n  // [type `boolean`, default `false`]\n  clearPriorAudioLists: false,\n\n  // Play your new play list right after your new play list is loaded turn false.\n  // [type `boolean`, default `false`]\n  autoPlayInitLoadPlayList: false,\n\n  // Whether to load audio immediately after the page loads.  [type `Boolean | String`, default `false`]\n  // \"auto|metadata|none\" \"true| false\"\n  preload: false,\n\n  // Whether the player's background displays frosted glass effect  [type `Boolean`, default `false`]\n  glassBg: false,\n\n  // The next time you access the player, do you keep the last state  [type `Boolean` default `false`]\n  remember: false,\n\n  // The Audio Can be deleted  [type `Boolean`, default `true`]\n  remove: true,\n\n  // audio controller initial position    [ type `Object` default '{top:0,left:0}' ]\n  defaultPosition: {\n    right: 100,\n    bottom: 120,\n  },\n\n  // if you want dynamic change current play mode you can change it\n  // [type`order | orderLoop | singleLoop | shufflePlay`, default `order`]\n  // playMode: 'order',\n  defaultPlayMode: 'shufflePlay',\n\n  // audio mode        mini | full          [type `String`  default `mini`]\n  mode: 'full',\n\n  /**\n   * [ type `Boolean` default 'false' ]\n   * The default audioPlay handle function will be played again after each pause, If you only want to trigger it once, you can set 'true'\n   */\n  once: false,\n\n  // Whether the audio is played after loading is completed. [type `Boolean` default 'true']\n  autoPlay: false,\n\n  // Whether you can switch between two modes, full => mini  or mini => full   [type 'Boolean' default 'true']\n  toggleMode: false,\n\n  // Extensible custom content       [type 'Array' default '-' ]\n  extendsContent: null,\n\n  // default volume of the audio player [type `Number` default `1` range `0-1`]\n  defaultVolume: 0.8,\n\n  // playModeText show time [type `Number(ms)` default `600`]\n  playModeShowTime: 600,\n\n  // Whether to try playing the next audio when the current audio playback fails [type `Boolean` default `true`]\n  loadAudioErrorPlayNext: true,\n\n  // Auto hide the cover photo if no cover photo is available [type `Boolean` default `false`]\n  autoHiddenCover: false,\n\n  // Play and pause audio through blank space [type `Boolean` default `false`]\n  spaceBar: false,\n\n  // Enable responsive player, auto toggle desktop and mobile [type `Boolean` default `true`]\n  responsive: false,\n\n  /**\n   * Custom mobile media query string, eg use the mobile version UI on iPad.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\n   * [type `String` default '(max-width: 768px) and (orientation : portrait)']\n   */\n  mobileMediaQuery: '(max-width: 1024px)',\n\n  // Audio volume with fade in and fade out [type `{ fadeIn: number, fadeOut: number }` default `{ fadeIn: 0, fadeOut: 0 }`]\n  volumeFade: {\n    fadeIn: 0,\n    fadeOut: 0,\n  },\n  /**\n   * Restarts the current track when trying to play previous song, if the current time of the song is more than 1 second\n   Otherwise, plays the previous song in the list\n   [type `Boolean` default `false`]\n   */\n  restartCurrentOnPrev: false,\n\n  // https://github.com/SortableJS/Sortable#options\n  sortableOptions: {},\n\n  // Music is downloaded handle\n  onAudioDownload(audioInfo) {\n    /*console.log('audio download', audioInfo)*/\n  },\n\n  // audio play handle\n  onAudioPlay(audioInfo) {\n    /*console.log('audio playing', audioInfo)*/\n  },\n\n  // audio pause handle\n  onAudioPause(audioInfo) {\n    /*console.log('audio pause', audioInfo)*/\n  },\n\n  // When the user has moved/jumped to a new location in audio\n  onAudioSeeked(audioInfo) {\n    /*console.log('audio seeked', audioInfo)*/\n  },\n\n  // When the volume has changed  min = 0.0  max = 1.0\n  onAudioVolumeChange(currentVolume) {\n    /*console.log('audio volume change', currentVolume)*/\n  },\n\n  // The single song is ended handle\n  onAudioEnded(currentPlayId, audioLists, audioInfo) {\n    /*console.log('audio ended', currentPlayId, audioLists, audioInfo)*/\n  },\n\n  // audio load abort\n  onAudioAbort(currentPlayId, audioLists, audioInfo) {\n    /*console.log('audio abort', currentPlayId, audioLists, audioInfo)*/\n  },\n\n  // audio play progress handle\n  // eslint-disable-next-line no-unused-vars\n  onAudioProgress(audioInfo) {\n    // console.log('audio progress', audioInfo)\n  },\n\n  // audio reload handle\n  onAudioReload(audioInfo) {\n    /*console.log('audio reload:', audioInfo)*/\n  },\n\n  // audio load failed error handle\n  onAudioError(errMsg, currentPlayId, audioLists, audioInfo) {\n    /*console.error('audio error', errMsg, currentPlayId, audioLists, audioInfo)*/\n  },\n\n  // theme change handle\n  // onThemeChange(theme) {\n  //   console.log('theme change:', theme)\n  // },\n\n  onAudioListsChange(currentPlayId, audioLists, audioInfo) {\n    /*console.log('audio lists change:', currentPlayId, audioLists, audioInfo)*/\n  },\n\n  onAudioPlayTrackChange(currentPlayId, audioLists, audioInfo) {\n    /*    console.log(\n          'audio play track change:',\n          currentPlayId,\n          audioLists,\n          audioInfo,\n        )*/\n  },\n\n  // onPlayModeChange(playMode) {\n  //   console.log('play mode change:', playMode)\n  // },\n\n  // onModeChange(mode) {\n  //   console.log('mode change:', mode)\n  // },\n\n  onAudioListsPanelChange(panelVisible) {\n    /*console.log('audio lists panel visible:', panelVisible)*/\n  },\n\n  onAudioListsSortEnd(oldIndex, newIndex) {\n    /*console.log('audio lists sort end:', oldIndex, newIndex)*/\n  },\n\n  onAudioLyricChange(lineNum, currentLyric) {\n    /*console.log('audio lyric change:', lineNum, currentLyric)*/\n  },\n\n  // custom music player root node\n  getContainer() {\n    return document.body\n  },\n\n  /**\n   * @description get origin audio element instance , you can use it do everything\n   * @example\n   * audio.playbackRate = 1.5  // set play back rate\n   * audio.crossOrigin = 'xxx' // config cross origin\n   */\n  getAudioInstance(audio) {\n    console.log('audio instance', audio)\n  },\n\n  onBeforeDestroy(currentPlayId, audioLists, audioInfo) {\n    console.log('onBeforeDestroy currentPlayId: ', currentPlayId)\n    console.log('onBeforeDestroy audioLists: ', audioLists)\n    console.log('onBeforeDestroy audioInfo: ', audioInfo)\n    return new Promise((resolve, reject) => {\n      // your custom validate\n      // eslint-disable-next-line no-alert\n      if (window.confirm('Are you confirm destroy the player?')) {\n        // if resolve, player destroyed\n        resolve()\n      } else {\n        // if reject, skip.\n        reject()\n      }\n    })\n  },\n\n  onDestroyed(currentPlayId, audioLists, audioInfo) {\n    console.log('onDestroyed:', currentPlayId, audioLists, audioInfo)\n  },\n\n  onCoverClick(mode, audioLists, audioInfo) {\n    console.log('onCoverClick: ', mode, audioLists, audioInfo)\n  },\n\n  // custom audio title\n  // renderAudioTitle(audioInfo) {\n  //   return <a href=\"#\">{audioInfo.name}</a>\n  // },\n\n  // onPlayIndexChange (playIndex) {\n  //   console.log('onPlayIndexChange: ', playIndex);\n  // }\n\n  // transform audio info like return a Promise\n\n  /**\n   * @return\n   *  {\n   *    src: 'xxx',\n   *    filename: 'xxx',\n   *    mimeType: 'xxx'\n   *  }\n   */\n  // onBeforeAudioDownload() {\n  //   return Promise.resolve({\n  //     src: '1.mp3',\n  //   })\n  // },\n\n  /**\n   * customer download handler\n   * eg. a link , or https://www.npmjs.com/package/file-saver\n   * @param {*} downloadInfo\n   * @example\n   *\n   customDownloader(downloadInfo) {\n        const link = document.createElement('a')\n        link.href = downloadInfo.src\n        link.download = downloadInfo.filename || 'test'\n        document.body.appendChild(link)\n        link.click()\n      },\n   */\n  // customDownloader(downloadInfo) {\n  //   console.log(downloadInfo.src)\n  //   console.log(downloadInfo.filename)\n  //   console.log(downloadInfo.mimeType)\n  // },\n}\n\n/*audioList 정렬*/\nconst onAudioListSort = (audioList) =>{\n  audioList.sort(function (a,b){\n    return a.order - b.order\n  })\n\n  return audioList\n}\n\n/**/\nclass Demo extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.audio = {}\n\n  }\n\n  state = {\n    unmount: false,\n    params: {\n      audioLists : onAudioListSort(audioList1),\n\n      ...options,\n      getAudioInstance: (audio) => {\n        this.audio = audio\n      },\n    },\n  }\n\n  /*param update*/\n  updateParams = (params) => {\n    const data = {\n      ...this.state.params,\n      ...params,\n    }\n    this.setState({\n      params: data,\n    })\n  }\n\n  extendsContent = () => {\n    this.updateParams({\n      extendsContent: (\n          <button\n              type=\"button\"\n              onClick={() => {\n                // eslint-disable-next-line no-alert\n                alert(\"I'm extends content\")\n              }}\n          >\n            button\n          </button>\n      ),\n    })\n  }\n\n\n  /*실제 표출 시작*/\n  render() {\n    const { params, unmount } = this.state\n\n    return (\n        <div>\n          {unmount ? null : (\n              <ReactJkMusicPlayer\n                  {...params}\n              />\n          )}\n        </div>\n    )\n  }\n}\n\nexport default hot(Demo)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}